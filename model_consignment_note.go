/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the ConsignmentNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsignmentNote{}

// ConsignmentNote struct for ConsignmentNote
type ConsignmentNote struct {
	Tracking *string `json:"tracking,omitempty"`
	Date *string `json:"date,omitempty"`
}

// NewConsignmentNote instantiates a new ConsignmentNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsignmentNote() *ConsignmentNote {
	this := ConsignmentNote{}
	return &this
}

// NewConsignmentNoteWithDefaults instantiates a new ConsignmentNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsignmentNoteWithDefaults() *ConsignmentNote {
	this := ConsignmentNote{}
	return &this
}

// GetTracking returns the Tracking field value if set, zero value otherwise.
func (o *ConsignmentNote) GetTracking() string {
	if o == nil || IsNil(o.Tracking) {
		var ret string
		return ret
	}
	return *o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsignmentNote) GetTrackingOk() (*string, bool) {
	if o == nil || IsNil(o.Tracking) {
		return nil, false
	}
	return o.Tracking, true
}

// HasTracking returns a boolean if a field has been set.
func (o *ConsignmentNote) HasTracking() bool {
	if o != nil && !IsNil(o.Tracking) {
		return true
	}

	return false
}

// SetTracking gets a reference to the given string and assigns it to the Tracking field.
func (o *ConsignmentNote) SetTracking(v string) {
	o.Tracking = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ConsignmentNote) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsignmentNote) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ConsignmentNote) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ConsignmentNote) SetDate(v string) {
	o.Date = &v
}

func (o ConsignmentNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsignmentNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tracking) {
		toSerialize["tracking"] = o.Tracking
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableConsignmentNote struct {
	value *ConsignmentNote
	isSet bool
}

func (v NullableConsignmentNote) Get() *ConsignmentNote {
	return v.value
}

func (v *NullableConsignmentNote) Set(val *ConsignmentNote) {
	v.value = val
	v.isSet = true
}

func (v NullableConsignmentNote) IsSet() bool {
	return v.isSet
}

func (v *NullableConsignmentNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsignmentNote(val *ConsignmentNote) *NullableConsignmentNote {
	return &NullableConsignmentNote{value: val, isSet: true}
}

func (v NullableConsignmentNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsignmentNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


