/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HistoryReportRequestInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReportRequestInput{}

// HistoryReportRequestInput The main payload for history report, to be sent as a stringified JSON in the 'input' field.
type HistoryReportRequestInput struct {
	User User `json:"user"`
	Date HistoryReportRequestInputDate `json:"date"`
	MaximumRecords *int32 `json:"maximum_records,omitempty"`
}

type _HistoryReportRequestInput HistoryReportRequestInput

// NewHistoryReportRequestInput instantiates a new HistoryReportRequestInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReportRequestInput(user User, date HistoryReportRequestInputDate) *HistoryReportRequestInput {
	this := HistoryReportRequestInput{}
	this.User = user
	this.Date = date
	return &this
}

// NewHistoryReportRequestInputWithDefaults instantiates a new HistoryReportRequestInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReportRequestInputWithDefaults() *HistoryReportRequestInput {
	this := HistoryReportRequestInput{}
	return &this
}

// GetUser returns the User field value
func (o *HistoryReportRequestInput) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *HistoryReportRequestInput) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *HistoryReportRequestInput) SetUser(v User) {
	o.User = v
}

// GetDate returns the Date field value
func (o *HistoryReportRequestInput) GetDate() HistoryReportRequestInputDate {
	if o == nil {
		var ret HistoryReportRequestInputDate
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *HistoryReportRequestInput) GetDateOk() (*HistoryReportRequestInputDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *HistoryReportRequestInput) SetDate(v HistoryReportRequestInputDate) {
	o.Date = v
}

// GetMaximumRecords returns the MaximumRecords field value if set, zero value otherwise.
func (o *HistoryReportRequestInput) GetMaximumRecords() int32 {
	if o == nil || IsNil(o.MaximumRecords) {
		var ret int32
		return ret
	}
	return *o.MaximumRecords
}

// GetMaximumRecordsOk returns a tuple with the MaximumRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryReportRequestInput) GetMaximumRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumRecords) {
		return nil, false
	}
	return o.MaximumRecords, true
}

// HasMaximumRecords returns a boolean if a field has been set.
func (o *HistoryReportRequestInput) HasMaximumRecords() bool {
	if o != nil && !IsNil(o.MaximumRecords) {
		return true
	}

	return false
}

// SetMaximumRecords gets a reference to the given int32 and assigns it to the MaximumRecords field.
func (o *HistoryReportRequestInput) SetMaximumRecords(v int32) {
	o.MaximumRecords = &v
}

func (o HistoryReportRequestInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReportRequestInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["date"] = o.Date
	if !IsNil(o.MaximumRecords) {
		toSerialize["maximum_records"] = o.MaximumRecords
	}
	return toSerialize, nil
}

func (o *HistoryReportRequestInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHistoryReportRequestInput := _HistoryReportRequestInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHistoryReportRequestInput)

	if err != nil {
		return err
	}

	*o = HistoryReportRequestInput(varHistoryReportRequestInput)

	return err
}

type NullableHistoryReportRequestInput struct {
	value *HistoryReportRequestInput
	isSet bool
}

func (v NullableHistoryReportRequestInput) Get() *HistoryReportRequestInput {
	return v.value
}

func (v *NullableHistoryReportRequestInput) Set(val *HistoryReportRequestInput) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReportRequestInput) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReportRequestInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReportRequestInput(val *HistoryReportRequestInput) *NullableHistoryReportRequestInput {
	return &NullableHistoryReportRequestInput{value: val, isSet: true}
}

func (v NullableHistoryReportRequestInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReportRequestInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


