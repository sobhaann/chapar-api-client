/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BulkHistoryEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkHistoryEvent{}

// BulkHistoryEvent struct for BulkHistoryEvent
type BulkHistoryEvent struct {
	Status string `json:"status"`
	Tracking string `json:"tracking"`
}

type _BulkHistoryEvent BulkHistoryEvent

// NewBulkHistoryEvent instantiates a new BulkHistoryEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkHistoryEvent(status string, tracking string) *BulkHistoryEvent {
	this := BulkHistoryEvent{}
	this.Status = status
	this.Tracking = tracking
	return &this
}

// NewBulkHistoryEventWithDefaults instantiates a new BulkHistoryEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkHistoryEventWithDefaults() *BulkHistoryEvent {
	this := BulkHistoryEvent{}
	return &this
}

// GetStatus returns the Status field value
func (o *BulkHistoryEvent) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BulkHistoryEvent) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BulkHistoryEvent) SetStatus(v string) {
	o.Status = v
}

// GetTracking returns the Tracking field value
func (o *BulkHistoryEvent) GetTracking() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value
// and a boolean to check if the value has been set.
func (o *BulkHistoryEvent) GetTrackingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tracking, true
}

// SetTracking sets field value
func (o *BulkHistoryEvent) SetTracking(v string) {
	o.Tracking = v
}

func (o BulkHistoryEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkHistoryEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["tracking"] = o.Tracking
	return toSerialize, nil
}

func (o *BulkHistoryEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"tracking",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkHistoryEvent := _BulkHistoryEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBulkHistoryEvent)

	if err != nil {
		return err
	}

	*o = BulkHistoryEvent(varBulkHistoryEvent)

	return err
}

type NullableBulkHistoryEvent struct {
	value *BulkHistoryEvent
	isSet bool
}

func (v NullableBulkHistoryEvent) Get() *BulkHistoryEvent {
	return v.value
}

func (v *NullableBulkHistoryEvent) Set(val *BulkHistoryEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkHistoryEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkHistoryEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkHistoryEvent(val *BulkHistoryEvent) *NullableBulkHistoryEvent {
	return &NullableBulkHistoryEvent{value: val, isSet: true}
}

func (v NullableBulkHistoryEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkHistoryEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


