/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the GetCityDataObjects type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCityDataObjects{}

// GetCityDataObjects struct for GetCityDataObjects
type GetCityDataObjects struct {
	City []City `json:"city,omitempty"`
	Selected map[string]interface{} `json:"selected,omitempty"`
}

// NewGetCityDataObjects instantiates a new GetCityDataObjects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCityDataObjects() *GetCityDataObjects {
	this := GetCityDataObjects{}
	return &this
}

// NewGetCityDataObjectsWithDefaults instantiates a new GetCityDataObjects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCityDataObjectsWithDefaults() *GetCityDataObjects {
	this := GetCityDataObjects{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *GetCityDataObjects) GetCity() []City {
	if o == nil || IsNil(o.City) {
		var ret []City
		return ret
	}
	return o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCityDataObjects) GetCityOk() ([]City, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *GetCityDataObjects) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given []City and assigns it to the City field.
func (o *GetCityDataObjects) SetCity(v []City) {
	o.City = v
}

// GetSelected returns the Selected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetCityDataObjects) GetSelected() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetCityDataObjects) GetSelectedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Selected) {
		return map[string]interface{}{}, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *GetCityDataObjects) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given map[string]interface{} and assigns it to the Selected field.
func (o *GetCityDataObjects) SetSelected(v map[string]interface{}) {
	o.Selected = v
}

func (o GetCityDataObjects) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCityDataObjects) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if o.Selected != nil {
		toSerialize["selected"] = o.Selected
	}
	return toSerialize, nil
}

type NullableGetCityDataObjects struct {
	value *GetCityDataObjects
	isSet bool
}

func (v NullableGetCityDataObjects) Get() *GetCityDataObjects {
	return v.value
}

func (v *NullableGetCityDataObjects) Set(val *GetCityDataObjects) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCityDataObjects) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCityDataObjects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCityDataObjects(val *GetCityDataObjects) *NullableGetCityDataObjects {
	return &NullableGetCityDataObjects{value: val, isSet: true}
}

func (v NullableGetCityDataObjects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCityDataObjects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


