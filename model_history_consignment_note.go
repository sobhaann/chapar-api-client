/*
Chapar Customer API

API for interacting with the Chapar shipping service. All requests are sent with a single query parameter `input` which contains a URL-encoded JSON string payload.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the HistoryConsignmentNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryConsignmentNote{}

// HistoryConsignmentNote struct for HistoryConsignmentNote
type HistoryConsignmentNote struct {
	Tracking *string `json:"tracking,omitempty"`
	LastStatus *string `json:"last_status,omitempty"`
}

// NewHistoryConsignmentNote instantiates a new HistoryConsignmentNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryConsignmentNote() *HistoryConsignmentNote {
	this := HistoryConsignmentNote{}
	return &this
}

// NewHistoryConsignmentNoteWithDefaults instantiates a new HistoryConsignmentNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryConsignmentNoteWithDefaults() *HistoryConsignmentNote {
	this := HistoryConsignmentNote{}
	return &this
}

// GetTracking returns the Tracking field value if set, zero value otherwise.
func (o *HistoryConsignmentNote) GetTracking() string {
	if o == nil || IsNil(o.Tracking) {
		var ret string
		return ret
	}
	return *o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryConsignmentNote) GetTrackingOk() (*string, bool) {
	if o == nil || IsNil(o.Tracking) {
		return nil, false
	}
	return o.Tracking, true
}

// HasTracking returns a boolean if a field has been set.
func (o *HistoryConsignmentNote) HasTracking() bool {
	if o != nil && !IsNil(o.Tracking) {
		return true
	}

	return false
}

// SetTracking gets a reference to the given string and assigns it to the Tracking field.
func (o *HistoryConsignmentNote) SetTracking(v string) {
	o.Tracking = &v
}

// GetLastStatus returns the LastStatus field value if set, zero value otherwise.
func (o *HistoryConsignmentNote) GetLastStatus() string {
	if o == nil || IsNil(o.LastStatus) {
		var ret string
		return ret
	}
	return *o.LastStatus
}

// GetLastStatusOk returns a tuple with the LastStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryConsignmentNote) GetLastStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastStatus) {
		return nil, false
	}
	return o.LastStatus, true
}

// HasLastStatus returns a boolean if a field has been set.
func (o *HistoryConsignmentNote) HasLastStatus() bool {
	if o != nil && !IsNil(o.LastStatus) {
		return true
	}

	return false
}

// SetLastStatus gets a reference to the given string and assigns it to the LastStatus field.
func (o *HistoryConsignmentNote) SetLastStatus(v string) {
	o.LastStatus = &v
}

func (o HistoryConsignmentNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryConsignmentNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tracking) {
		toSerialize["tracking"] = o.Tracking
	}
	if !IsNil(o.LastStatus) {
		toSerialize["last_status"] = o.LastStatus
	}
	return toSerialize, nil
}

type NullableHistoryConsignmentNote struct {
	value *HistoryConsignmentNote
	isSet bool
}

func (v NullableHistoryConsignmentNote) Get() *HistoryConsignmentNote {
	return v.value
}

func (v *NullableHistoryConsignmentNote) Set(val *HistoryConsignmentNote) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryConsignmentNote) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryConsignmentNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryConsignmentNote(val *HistoryConsignmentNote) *NullableHistoryConsignmentNote {
	return &NullableHistoryConsignmentNote{value: val, isSet: true}
}

func (v NullableHistoryConsignmentNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryConsignmentNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


