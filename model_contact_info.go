/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the ContactInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactInfo{}

// ContactInfo struct for ContactInfo
type ContactInfo struct {
	Person NullableString `json:"person,omitempty"`
	Company NullableString `json:"company,omitempty"`
	City NullableString `json:"city,omitempty"`
	Telephone NullableString `json:"telephone,omitempty"`
	Mobile NullableString `json:"mobile,omitempty"`
	Address NullableString `json:"address,omitempty"`
	PostCode NullableString `json:"post_code,omitempty"`
}

// NewContactInfo instantiates a new ContactInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactInfo() *ContactInfo {
	this := ContactInfo{}
	return &this
}

// NewContactInfoWithDefaults instantiates a new ContactInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactInfoWithDefaults() *ContactInfo {
	this := ContactInfo{}
	return &this
}

// GetPerson returns the Person field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactInfo) GetPerson() string {
	if o == nil || IsNil(o.Person.Get()) {
		var ret string
		return ret
	}
	return *o.Person.Get()
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactInfo) GetPersonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Person.Get(), o.Person.IsSet()
}

// HasPerson returns a boolean if a field has been set.
func (o *ContactInfo) HasPerson() bool {
	if o != nil && o.Person.IsSet() {
		return true
	}

	return false
}

// SetPerson gets a reference to the given NullableString and assigns it to the Person field.
func (o *ContactInfo) SetPerson(v string) {
	o.Person.Set(&v)
}
// SetPersonNil sets the value for Person to be an explicit nil
func (o *ContactInfo) SetPersonNil() {
	o.Person.Set(nil)
}

// UnsetPerson ensures that no value is present for Person, not even an explicit nil
func (o *ContactInfo) UnsetPerson() {
	o.Person.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactInfo) GetCompany() string {
	if o == nil || IsNil(o.Company.Get()) {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactInfo) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *ContactInfo) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *ContactInfo) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *ContactInfo) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *ContactInfo) UnsetCompany() {
	o.Company.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactInfo) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactInfo) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *ContactInfo) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *ContactInfo) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *ContactInfo) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *ContactInfo) UnsetCity() {
	o.City.Unset()
}

// GetTelephone returns the Telephone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactInfo) GetTelephone() string {
	if o == nil || IsNil(o.Telephone.Get()) {
		var ret string
		return ret
	}
	return *o.Telephone.Get()
}

// GetTelephoneOk returns a tuple with the Telephone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactInfo) GetTelephoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Telephone.Get(), o.Telephone.IsSet()
}

// HasTelephone returns a boolean if a field has been set.
func (o *ContactInfo) HasTelephone() bool {
	if o != nil && o.Telephone.IsSet() {
		return true
	}

	return false
}

// SetTelephone gets a reference to the given NullableString and assigns it to the Telephone field.
func (o *ContactInfo) SetTelephone(v string) {
	o.Telephone.Set(&v)
}
// SetTelephoneNil sets the value for Telephone to be an explicit nil
func (o *ContactInfo) SetTelephoneNil() {
	o.Telephone.Set(nil)
}

// UnsetTelephone ensures that no value is present for Telephone, not even an explicit nil
func (o *ContactInfo) UnsetTelephone() {
	o.Telephone.Unset()
}

// GetMobile returns the Mobile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactInfo) GetMobile() string {
	if o == nil || IsNil(o.Mobile.Get()) {
		var ret string
		return ret
	}
	return *o.Mobile.Get()
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactInfo) GetMobileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mobile.Get(), o.Mobile.IsSet()
}

// HasMobile returns a boolean if a field has been set.
func (o *ContactInfo) HasMobile() bool {
	if o != nil && o.Mobile.IsSet() {
		return true
	}

	return false
}

// SetMobile gets a reference to the given NullableString and assigns it to the Mobile field.
func (o *ContactInfo) SetMobile(v string) {
	o.Mobile.Set(&v)
}
// SetMobileNil sets the value for Mobile to be an explicit nil
func (o *ContactInfo) SetMobileNil() {
	o.Mobile.Set(nil)
}

// UnsetMobile ensures that no value is present for Mobile, not even an explicit nil
func (o *ContactInfo) UnsetMobile() {
	o.Mobile.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactInfo) GetAddress() string {
	if o == nil || IsNil(o.Address.Get()) {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *ContactInfo) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *ContactInfo) SetAddress(v string) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *ContactInfo) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *ContactInfo) UnsetAddress() {
	o.Address.Unset()
}

// GetPostCode returns the PostCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactInfo) GetPostCode() string {
	if o == nil || IsNil(o.PostCode.Get()) {
		var ret string
		return ret
	}
	return *o.PostCode.Get()
}

// GetPostCodeOk returns a tuple with the PostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactInfo) GetPostCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostCode.Get(), o.PostCode.IsSet()
}

// HasPostCode returns a boolean if a field has been set.
func (o *ContactInfo) HasPostCode() bool {
	if o != nil && o.PostCode.IsSet() {
		return true
	}

	return false
}

// SetPostCode gets a reference to the given NullableString and assigns it to the PostCode field.
func (o *ContactInfo) SetPostCode(v string) {
	o.PostCode.Set(&v)
}
// SetPostCodeNil sets the value for PostCode to be an explicit nil
func (o *ContactInfo) SetPostCodeNil() {
	o.PostCode.Set(nil)
}

// UnsetPostCode ensures that no value is present for PostCode, not even an explicit nil
func (o *ContactInfo) UnsetPostCode() {
	o.PostCode.Unset()
}

func (o ContactInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Person.IsSet() {
		toSerialize["person"] = o.Person.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.Telephone.IsSet() {
		toSerialize["telephone"] = o.Telephone.Get()
	}
	if o.Mobile.IsSet() {
		toSerialize["mobile"] = o.Mobile.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.PostCode.IsSet() {
		toSerialize["post_code"] = o.PostCode.Get()
	}
	return toSerialize, nil
}

type NullableContactInfo struct {
	value *ContactInfo
	isSet bool
}

func (v NullableContactInfo) Get() *ContactInfo {
	return v.value
}

func (v *NullableContactInfo) Set(val *ContactInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableContactInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableContactInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactInfo(val *ContactInfo) *NullableContactInfo {
	return &NullableContactInfo{value: val, isSet: true}
}

func (v NullableContactInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


