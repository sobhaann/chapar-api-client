/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the CityItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CityItem{}

// CityItem struct for CityItem
type CityItem struct {
	StateNo *string `json:"state_no,omitempty"`
	False *string `json:"false,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewCityItem instantiates a new CityItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCityItem() *CityItem {
	this := CityItem{}
	return &this
}

// NewCityItemWithDefaults instantiates a new CityItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCityItemWithDefaults() *CityItem {
	this := CityItem{}
	return &this
}

// GetStateNo returns the StateNo field value if set, zero value otherwise.
func (o *CityItem) GetStateNo() string {
	if o == nil || IsNil(o.StateNo) {
		var ret string
		return ret
	}
	return *o.StateNo
}

// GetStateNoOk returns a tuple with the StateNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityItem) GetStateNoOk() (*string, bool) {
	if o == nil || IsNil(o.StateNo) {
		return nil, false
	}
	return o.StateNo, true
}

// HasStateNo returns a boolean if a field has been set.
func (o *CityItem) HasStateNo() bool {
	if o != nil && !IsNil(o.StateNo) {
		return true
	}

	return false
}

// SetStateNo gets a reference to the given string and assigns it to the StateNo field.
func (o *CityItem) SetStateNo(v string) {
	o.StateNo = &v
}

// GetFalse returns the False field value if set, zero value otherwise.
func (o *CityItem) GetFalse() string {
	if o == nil || IsNil(o.False) {
		var ret string
		return ret
	}
	return *o.False
}

// GetFalseOk returns a tuple with the False field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityItem) GetFalseOk() (*string, bool) {
	if o == nil || IsNil(o.False) {
		return nil, false
	}
	return o.False, true
}

// HasFalse returns a boolean if a field has been set.
func (o *CityItem) HasFalse() bool {
	if o != nil && !IsNil(o.False) {
		return true
	}

	return false
}

// SetFalse gets a reference to the given string and assigns it to the False field.
func (o *CityItem) SetFalse(v string) {
	o.False = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CityItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CityItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CityItem) SetName(v string) {
	o.Name = &v
}

func (o CityItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CityItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StateNo) {
		toSerialize["state_no"] = o.StateNo
	}
	if !IsNil(o.False) {
		toSerialize["false"] = o.False
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableCityItem struct {
	value *CityItem
	isSet bool
}

func (v NullableCityItem) Get() *CityItem {
	return v.value
}

func (v *NullableCityItem) Set(val *CityItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCityItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCityItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCityItem(val *CityItem) *NullableCityItem {
	return &NullableCityItem{value: val, isSet: true}
}

func (v NullableCityItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCityItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


