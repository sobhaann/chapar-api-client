/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the GetCityData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCityData{}

// GetCityData struct for GetCityData
type GetCityData struct {
	Objects *GetCityDataObjects `json:"objects,omitempty"`
}

// NewGetCityData instantiates a new GetCityData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCityData() *GetCityData {
	this := GetCityData{}
	return &this
}

// NewGetCityDataWithDefaults instantiates a new GetCityData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCityDataWithDefaults() *GetCityData {
	this := GetCityData{}
	return &this
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *GetCityData) GetObjects() GetCityDataObjects {
	if o == nil || IsNil(o.Objects) {
		var ret GetCityDataObjects
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCityData) GetObjectsOk() (*GetCityDataObjects, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *GetCityData) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given GetCityDataObjects and assigns it to the Objects field.
func (o *GetCityData) SetObjects(v GetCityDataObjects) {
	o.Objects = &v
}

func (o GetCityData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCityData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	return toSerialize, nil
}

type NullableGetCityData struct {
	value *GetCityData
	isSet bool
}

func (v NullableGetCityData) Get() *GetCityData {
	return v.value
}

func (v *NullableGetCityData) Set(val *GetCityData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCityData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCityData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCityData(val *GetCityData) *NullableGetCityData {
	return &NullableGetCityData{value: val, isSet: true}
}

func (v NullableGetCityData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCityData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


