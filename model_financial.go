/*
Chapar Customer API

API for interacting with the Chapar shipping service. All requests are sent with a single query parameter `input` which contains a URL-encoded JSON string payload.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the Financial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Financial{}

// Financial struct for Financial
type Financial struct {
	DeliveryCharge *string `json:"delivery_charge,omitempty"`
	TotalCharge *int32 `json:"total_charge,omitempty"`
}

// NewFinancial instantiates a new Financial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancial() *Financial {
	this := Financial{}
	return &this
}

// NewFinancialWithDefaults instantiates a new Financial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialWithDefaults() *Financial {
	this := Financial{}
	return &this
}

// GetDeliveryCharge returns the DeliveryCharge field value if set, zero value otherwise.
func (o *Financial) GetDeliveryCharge() string {
	if o == nil || IsNil(o.DeliveryCharge) {
		var ret string
		return ret
	}
	return *o.DeliveryCharge
}

// GetDeliveryChargeOk returns a tuple with the DeliveryCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Financial) GetDeliveryChargeOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryCharge) {
		return nil, false
	}
	return o.DeliveryCharge, true
}

// HasDeliveryCharge returns a boolean if a field has been set.
func (o *Financial) HasDeliveryCharge() bool {
	if o != nil && !IsNil(o.DeliveryCharge) {
		return true
	}

	return false
}

// SetDeliveryCharge gets a reference to the given string and assigns it to the DeliveryCharge field.
func (o *Financial) SetDeliveryCharge(v string) {
	o.DeliveryCharge = &v
}

// GetTotalCharge returns the TotalCharge field value if set, zero value otherwise.
func (o *Financial) GetTotalCharge() int32 {
	if o == nil || IsNil(o.TotalCharge) {
		var ret int32
		return ret
	}
	return *o.TotalCharge
}

// GetTotalChargeOk returns a tuple with the TotalCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Financial) GetTotalChargeOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCharge) {
		return nil, false
	}
	return o.TotalCharge, true
}

// HasTotalCharge returns a boolean if a field has been set.
func (o *Financial) HasTotalCharge() bool {
	if o != nil && !IsNil(o.TotalCharge) {
		return true
	}

	return false
}

// SetTotalCharge gets a reference to the given int32 and assigns it to the TotalCharge field.
func (o *Financial) SetTotalCharge(v int32) {
	o.TotalCharge = &v
}

func (o Financial) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Financial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeliveryCharge) {
		toSerialize["delivery_charge"] = o.DeliveryCharge
	}
	if !IsNil(o.TotalCharge) {
		toSerialize["total_charge"] = o.TotalCharge
	}
	return toSerialize, nil
}

type NullableFinancial struct {
	value *Financial
	isSet bool
}

func (v NullableFinancial) Get() *Financial {
	return v.value
}

func (v *NullableFinancial) Set(val *Financial) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancial) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancial(val *Financial) *NullableFinancial {
	return &NullableFinancial{value: val, isSet: true}
}

func (v NullableFinancial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


