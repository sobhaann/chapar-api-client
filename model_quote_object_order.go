/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QuoteObjectOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteObjectOrder{}

// QuoteObjectOrder struct for QuoteObjectOrder
type QuoteObjectOrder struct {
	Quote int32 `json:"quote"`
	Price PriceDetails `json:"price"`
	Currency string `json:"currency"`
}

type _QuoteObjectOrder QuoteObjectOrder

// NewQuoteObjectOrder instantiates a new QuoteObjectOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteObjectOrder(quote int32, price PriceDetails, currency string) *QuoteObjectOrder {
	this := QuoteObjectOrder{}
	this.Quote = quote
	this.Price = price
	this.Currency = currency
	return &this
}

// NewQuoteObjectOrderWithDefaults instantiates a new QuoteObjectOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteObjectOrderWithDefaults() *QuoteObjectOrder {
	this := QuoteObjectOrder{}
	return &this
}

// GetQuote returns the Quote field value
func (o *QuoteObjectOrder) GetQuote() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value
// and a boolean to check if the value has been set.
func (o *QuoteObjectOrder) GetQuoteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quote, true
}

// SetQuote sets field value
func (o *QuoteObjectOrder) SetQuote(v int32) {
	o.Quote = v
}

// GetPrice returns the Price field value
func (o *QuoteObjectOrder) GetPrice() PriceDetails {
	if o == nil {
		var ret PriceDetails
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *QuoteObjectOrder) GetPriceOk() (*PriceDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *QuoteObjectOrder) SetPrice(v PriceDetails) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *QuoteObjectOrder) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *QuoteObjectOrder) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *QuoteObjectOrder) SetCurrency(v string) {
	o.Currency = v
}

func (o QuoteObjectOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteObjectOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quote"] = o.Quote
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	return toSerialize, nil
}

func (o *QuoteObjectOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quote",
		"price",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteObjectOrder := _QuoteObjectOrder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuoteObjectOrder)

	if err != nil {
		return err
	}

	*o = QuoteObjectOrder(varQuoteObjectOrder)

	return err
}

type NullableQuoteObjectOrder struct {
	value *QuoteObjectOrder
	isSet bool
}

func (v NullableQuoteObjectOrder) Get() *QuoteObjectOrder {
	return v.value
}

func (v *NullableQuoteObjectOrder) Set(val *QuoteObjectOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteObjectOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteObjectOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteObjectOrder(val *QuoteObjectOrder) *NullableQuoteObjectOrder {
	return &NullableQuoteObjectOrder{value: val, isSet: true}
}

func (v NullableQuoteObjectOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteObjectOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


