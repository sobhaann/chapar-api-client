/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetCityObjectObjects type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCityObjectObjects{}

// GetCityObjectObjects struct for GetCityObjectObjects
type GetCityObjectObjects struct {
	City []CityItem `json:"city"`
	Selected map[string]interface{} `json:"selected,omitempty"`
}

type _GetCityObjectObjects GetCityObjectObjects

// NewGetCityObjectObjects instantiates a new GetCityObjectObjects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCityObjectObjects(city []CityItem) *GetCityObjectObjects {
	this := GetCityObjectObjects{}
	this.City = city
	return &this
}

// NewGetCityObjectObjectsWithDefaults instantiates a new GetCityObjectObjects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCityObjectObjectsWithDefaults() *GetCityObjectObjects {
	this := GetCityObjectObjects{}
	return &this
}

// GetCity returns the City field value
func (o *GetCityObjectObjects) GetCity() []CityItem {
	if o == nil {
		var ret []CityItem
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *GetCityObjectObjects) GetCityOk() ([]CityItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.City, true
}

// SetCity sets field value
func (o *GetCityObjectObjects) SetCity(v []CityItem) {
	o.City = v
}

// GetSelected returns the Selected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetCityObjectObjects) GetSelected() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetCityObjectObjects) GetSelectedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Selected) {
		return map[string]interface{}{}, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *GetCityObjectObjects) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given map[string]interface{} and assigns it to the Selected field.
func (o *GetCityObjectObjects) SetSelected(v map[string]interface{}) {
	o.Selected = v
}

func (o GetCityObjectObjects) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCityObjectObjects) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city"] = o.City
	if o.Selected != nil {
		toSerialize["selected"] = o.Selected
	}
	return toSerialize, nil
}

func (o *GetCityObjectObjects) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetCityObjectObjects := _GetCityObjectObjects{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetCityObjectObjects)

	if err != nil {
		return err
	}

	*o = GetCityObjectObjects(varGetCityObjectObjects)

	return err
}

type NullableGetCityObjectObjects struct {
	value *GetCityObjectObjects
	isSet bool
}

func (v NullableGetCityObjectObjects) Get() *GetCityObjectObjects {
	return v.value
}

func (v *NullableGetCityObjectObjects) Set(val *GetCityObjectObjects) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCityObjectObjects) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCityObjectObjects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCityObjectObjects(val *GetCityObjectObjects) *NullableGetCityObjectObjects {
	return &NullableGetCityObjectObjects{value: val, isSet: true}
}

func (v NullableGetCityObjectObjects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCityObjectObjects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


