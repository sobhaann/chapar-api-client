/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the GetCityObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCityObject{}

// GetCityObject struct for GetCityObject
type GetCityObject struct {
	Objects *GetCityObjectObjects `json:"objects,omitempty"`
}

// NewGetCityObject instantiates a new GetCityObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCityObject() *GetCityObject {
	this := GetCityObject{}
	return &this
}

// NewGetCityObjectWithDefaults instantiates a new GetCityObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCityObjectWithDefaults() *GetCityObject {
	this := GetCityObject{}
	return &this
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *GetCityObject) GetObjects() GetCityObjectObjects {
	if o == nil || IsNil(o.Objects) {
		var ret GetCityObjectObjects
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCityObject) GetObjectsOk() (*GetCityObjectObjects, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *GetCityObject) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given GetCityObjectObjects and assigns it to the Objects field.
func (o *GetCityObject) SetObjects(v GetCityObjectObjects) {
	o.Objects = &v
}

func (o GetCityObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCityObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	return toSerialize, nil
}

type NullableGetCityObject struct {
	value *GetCityObject
	isSet bool
}

func (v NullableGetCityObject) Get() *GetCityObject {
	return v.value
}

func (v *NullableGetCityObject) Set(val *GetCityObject) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCityObject) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCityObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCityObject(val *GetCityObject) *NullableGetCityObject {
	return &NullableGetCityObject{value: val, isSet: true}
}

func (v NullableGetCityObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCityObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


