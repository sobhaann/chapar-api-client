/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetCityObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCityObject{}

// GetCityObject struct for GetCityObject
type GetCityObject struct {
	City []City `json:"city"`
	Selected map[string]interface{} `json:"selected,omitempty"`
}

type _GetCityObject GetCityObject

// NewGetCityObject instantiates a new GetCityObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCityObject(city []City) *GetCityObject {
	this := GetCityObject{}
	this.City = city
	return &this
}

// NewGetCityObjectWithDefaults instantiates a new GetCityObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCityObjectWithDefaults() *GetCityObject {
	this := GetCityObject{}
	return &this
}

// GetCity returns the City field value
func (o *GetCityObject) GetCity() []City {
	if o == nil {
		var ret []City
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *GetCityObject) GetCityOk() ([]City, bool) {
	if o == nil {
		return nil, false
	}
	return o.City, true
}

// SetCity sets field value
func (o *GetCityObject) SetCity(v []City) {
	o.City = v
}

// GetSelected returns the Selected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetCityObject) GetSelected() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetCityObject) GetSelectedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Selected) {
		return map[string]interface{}{}, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *GetCityObject) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given map[string]interface{} and assigns it to the Selected field.
func (o *GetCityObject) SetSelected(v map[string]interface{}) {
	o.Selected = v
}

func (o GetCityObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCityObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city"] = o.City
	if o.Selected != nil {
		toSerialize["selected"] = o.Selected
	}
	return toSerialize, nil
}

func (o *GetCityObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetCityObject := _GetCityObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetCityObject)

	if err != nil {
		return err
	}

	*o = GetCityObject(varGetCityObject)

	return err
}

type NullableGetCityObject struct {
	value *GetCityObject
	isSet bool
}

func (v NullableGetCityObject) Get() *GetCityObject {
	return v.value
}

func (v *NullableGetCityObject) Set(val *GetCityObject) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCityObject) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCityObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCityObject(val *GetCityObject) *NullableGetCityObject {
	return &NullableGetCityObject{value: val, isSet: true}
}

func (v NullableGetCityObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCityObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


