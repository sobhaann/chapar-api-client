/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the City type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &City{}

// City struct for City
type City struct {
	StateNo string `json:"state_no"`
	False *string `json:"false,omitempty"`
	Name string `json:"name"`
}

type _City City

// NewCity instantiates a new City object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCity(stateNo string, name string) *City {
	this := City{}
	this.StateNo = stateNo
	this.Name = name
	return &this
}

// NewCityWithDefaults instantiates a new City object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCityWithDefaults() *City {
	this := City{}
	return &this
}

// GetStateNo returns the StateNo field value
func (o *City) GetStateNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateNo
}

// GetStateNoOk returns a tuple with the StateNo field value
// and a boolean to check if the value has been set.
func (o *City) GetStateNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateNo, true
}

// SetStateNo sets field value
func (o *City) SetStateNo(v string) {
	o.StateNo = v
}

// GetFalse returns the False field value if set, zero value otherwise.
func (o *City) GetFalse() string {
	if o == nil || IsNil(o.False) {
		var ret string
		return ret
	}
	return *o.False
}

// GetFalseOk returns a tuple with the False field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *City) GetFalseOk() (*string, bool) {
	if o == nil || IsNil(o.False) {
		return nil, false
	}
	return o.False, true
}

// HasFalse returns a boolean if a field has been set.
func (o *City) HasFalse() bool {
	if o != nil && !IsNil(o.False) {
		return true
	}

	return false
}

// SetFalse gets a reference to the given string and assigns it to the False field.
func (o *City) SetFalse(v string) {
	o.False = &v
}

// GetName returns the Name field value
func (o *City) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *City) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *City) SetName(v string) {
	o.Name = v
}

func (o City) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o City) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state_no"] = o.StateNo
	if !IsNil(o.False) {
		toSerialize["false"] = o.False
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *City) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state_no",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCity := _City{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCity)

	if err != nil {
		return err
	}

	*o = City(varCity)

	return err
}

type NullableCity struct {
	value *City
	isSet bool
}

func (v NullableCity) Get() *City {
	return v.value
}

func (v *NullableCity) Set(val *City) {
	v.value = val
	v.isSet = true
}

func (v NullableCity) IsSet() bool {
	return v.isSet
}

func (v *NullableCity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCity(val *City) *NullableCity {
	return &NullableCity{value: val, isSet: true}
}

func (v NullableCity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


