/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDetails{}

// OrderDetails struct for OrderDetails
type OrderDetails struct {
	// Origin city code.
	Origin string `json:"origin"`
	// Destination city code.
	Destination string `json:"destination"`
	// Weight of the package in kilograms.
	Weight string `json:"weight"`
	// Declared value of the package in Rials.
	Value string `json:"value"`
	// Shipping method code.
	Method string `json:"method"`
	// Sender's code.
	SenderCode NullableString `json:"sender_code,omitempty"`
	// Receiver's code.
	ReceiverCode NullableString `json:"receiver_code,omitempty"`
	// Cash on Delivery amount. \"0\" for no COD.
	Cod NullableString `json:"cod,omitempty"`
}

type _OrderDetails OrderDetails

// NewOrderDetails instantiates a new OrderDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDetails(origin string, destination string, weight string, value string, method string) *OrderDetails {
	this := OrderDetails{}
	this.Origin = origin
	this.Destination = destination
	this.Weight = weight
	this.Value = value
	this.Method = method
	return &this
}

// NewOrderDetailsWithDefaults instantiates a new OrderDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDetailsWithDefaults() *OrderDetails {
	this := OrderDetails{}
	return &this
}

// GetOrigin returns the Origin field value
func (o *OrderDetails) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *OrderDetails) SetOrigin(v string) {
	o.Origin = v
}

// GetDestination returns the Destination field value
func (o *OrderDetails) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *OrderDetails) SetDestination(v string) {
	o.Destination = v
}

// GetWeight returns the Weight field value
func (o *OrderDetails) GetWeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetWeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *OrderDetails) SetWeight(v string) {
	o.Weight = v
}

// GetValue returns the Value field value
func (o *OrderDetails) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *OrderDetails) SetValue(v string) {
	o.Value = v
}

// GetMethod returns the Method field value
func (o *OrderDetails) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *OrderDetails) SetMethod(v string) {
	o.Method = v
}

// GetSenderCode returns the SenderCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderDetails) GetSenderCode() string {
	if o == nil || IsNil(o.SenderCode.Get()) {
		var ret string
		return ret
	}
	return *o.SenderCode.Get()
}

// GetSenderCodeOk returns a tuple with the SenderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderDetails) GetSenderCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SenderCode.Get(), o.SenderCode.IsSet()
}

// HasSenderCode returns a boolean if a field has been set.
func (o *OrderDetails) HasSenderCode() bool {
	if o != nil && o.SenderCode.IsSet() {
		return true
	}

	return false
}

// SetSenderCode gets a reference to the given NullableString and assigns it to the SenderCode field.
func (o *OrderDetails) SetSenderCode(v string) {
	o.SenderCode.Set(&v)
}
// SetSenderCodeNil sets the value for SenderCode to be an explicit nil
func (o *OrderDetails) SetSenderCodeNil() {
	o.SenderCode.Set(nil)
}

// UnsetSenderCode ensures that no value is present for SenderCode, not even an explicit nil
func (o *OrderDetails) UnsetSenderCode() {
	o.SenderCode.Unset()
}

// GetReceiverCode returns the ReceiverCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderDetails) GetReceiverCode() string {
	if o == nil || IsNil(o.ReceiverCode.Get()) {
		var ret string
		return ret
	}
	return *o.ReceiverCode.Get()
}

// GetReceiverCodeOk returns a tuple with the ReceiverCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderDetails) GetReceiverCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReceiverCode.Get(), o.ReceiverCode.IsSet()
}

// HasReceiverCode returns a boolean if a field has been set.
func (o *OrderDetails) HasReceiverCode() bool {
	if o != nil && o.ReceiverCode.IsSet() {
		return true
	}

	return false
}

// SetReceiverCode gets a reference to the given NullableString and assigns it to the ReceiverCode field.
func (o *OrderDetails) SetReceiverCode(v string) {
	o.ReceiverCode.Set(&v)
}
// SetReceiverCodeNil sets the value for ReceiverCode to be an explicit nil
func (o *OrderDetails) SetReceiverCodeNil() {
	o.ReceiverCode.Set(nil)
}

// UnsetReceiverCode ensures that no value is present for ReceiverCode, not even an explicit nil
func (o *OrderDetails) UnsetReceiverCode() {
	o.ReceiverCode.Unset()
}

// GetCod returns the Cod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderDetails) GetCod() string {
	if o == nil || IsNil(o.Cod.Get()) {
		var ret string
		return ret
	}
	return *o.Cod.Get()
}

// GetCodOk returns a tuple with the Cod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderDetails) GetCodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cod.Get(), o.Cod.IsSet()
}

// HasCod returns a boolean if a field has been set.
func (o *OrderDetails) HasCod() bool {
	if o != nil && o.Cod.IsSet() {
		return true
	}

	return false
}

// SetCod gets a reference to the given NullableString and assigns it to the Cod field.
func (o *OrderDetails) SetCod(v string) {
	o.Cod.Set(&v)
}
// SetCodNil sets the value for Cod to be an explicit nil
func (o *OrderDetails) SetCodNil() {
	o.Cod.Set(nil)
}

// UnsetCod ensures that no value is present for Cod, not even an explicit nil
func (o *OrderDetails) UnsetCod() {
	o.Cod.Unset()
}

func (o OrderDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["origin"] = o.Origin
	toSerialize["destination"] = o.Destination
	toSerialize["weight"] = o.Weight
	toSerialize["value"] = o.Value
	toSerialize["method"] = o.Method
	if o.SenderCode.IsSet() {
		toSerialize["sender_code"] = o.SenderCode.Get()
	}
	if o.ReceiverCode.IsSet() {
		toSerialize["receiver_code"] = o.ReceiverCode.Get()
	}
	if o.Cod.IsSet() {
		toSerialize["cod"] = o.Cod.Get()
	}
	return toSerialize, nil
}

func (o *OrderDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"origin",
		"destination",
		"weight",
		"value",
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderDetails := _OrderDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderDetails)

	if err != nil {
		return err
	}

	*o = OrderDetails(varOrderDetails)

	return err
}

type NullableOrderDetails struct {
	value *OrderDetails
	isSet bool
}

func (v NullableOrderDetails) Get() *OrderDetails {
	return v.value
}

func (v *NullableOrderDetails) Set(val *OrderDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDetails(val *OrderDetails) *NullableOrderDetails {
	return &NullableOrderDetails{value: val, isSet: true}
}

func (v NullableOrderDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


