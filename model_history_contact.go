/*
Chapar Customer API

API for interacting with the Chapar shipping service. All requests are sent with a single query parameter `input` which contains a URL-encoded JSON string payload.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the HistoryContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryContact{}

// HistoryContact struct for HistoryContact
type HistoryContact struct {
	Person *string `json:"person,omitempty"`
	City *string `json:"city,omitempty"`
}

// NewHistoryContact instantiates a new HistoryContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryContact() *HistoryContact {
	this := HistoryContact{}
	return &this
}

// NewHistoryContactWithDefaults instantiates a new HistoryContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryContactWithDefaults() *HistoryContact {
	this := HistoryContact{}
	return &this
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *HistoryContact) GetPerson() string {
	if o == nil || IsNil(o.Person) {
		var ret string
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryContact) GetPersonOk() (*string, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *HistoryContact) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given string and assigns it to the Person field.
func (o *HistoryContact) SetPerson(v string) {
	o.Person = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *HistoryContact) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryContact) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *HistoryContact) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *HistoryContact) SetCity(v string) {
	o.City = &v
}

func (o HistoryContact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	return toSerialize, nil
}

type NullableHistoryContact struct {
	value *HistoryContact
	isSet bool
}

func (v NullableHistoryContact) Get() *HistoryContact {
	return v.value
}

func (v *NullableHistoryContact) Set(val *HistoryContact) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryContact) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryContact(val *HistoryContact) *NullableHistoryContact {
	return &NullableHistoryContact{value: val, isSet: true}
}

func (v NullableHistoryContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


