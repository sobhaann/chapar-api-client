/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the TrackingHistoryItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackingHistoryItem{}

// TrackingHistoryItem struct for TrackingHistoryItem
type TrackingHistoryItem struct {
	TimestampDate *int32 `json:"timestamp_date,omitempty"`
	Date *string `json:"date,omitempty"`
	Status *string `json:"status,omitempty"`
	Loc NullableString `json:"loc,omitempty"`
}

// NewTrackingHistoryItem instantiates a new TrackingHistoryItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingHistoryItem() *TrackingHistoryItem {
	this := TrackingHistoryItem{}
	return &this
}

// NewTrackingHistoryItemWithDefaults instantiates a new TrackingHistoryItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingHistoryItemWithDefaults() *TrackingHistoryItem {
	this := TrackingHistoryItem{}
	return &this
}

// GetTimestampDate returns the TimestampDate field value if set, zero value otherwise.
func (o *TrackingHistoryItem) GetTimestampDate() int32 {
	if o == nil || IsNil(o.TimestampDate) {
		var ret int32
		return ret
	}
	return *o.TimestampDate
}

// GetTimestampDateOk returns a tuple with the TimestampDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingHistoryItem) GetTimestampDateOk() (*int32, bool) {
	if o == nil || IsNil(o.TimestampDate) {
		return nil, false
	}
	return o.TimestampDate, true
}

// HasTimestampDate returns a boolean if a field has been set.
func (o *TrackingHistoryItem) HasTimestampDate() bool {
	if o != nil && !IsNil(o.TimestampDate) {
		return true
	}

	return false
}

// SetTimestampDate gets a reference to the given int32 and assigns it to the TimestampDate field.
func (o *TrackingHistoryItem) SetTimestampDate(v int32) {
	o.TimestampDate = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TrackingHistoryItem) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingHistoryItem) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TrackingHistoryItem) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *TrackingHistoryItem) SetDate(v string) {
	o.Date = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TrackingHistoryItem) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingHistoryItem) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TrackingHistoryItem) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TrackingHistoryItem) SetStatus(v string) {
	o.Status = &v
}

// GetLoc returns the Loc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackingHistoryItem) GetLoc() string {
	if o == nil || IsNil(o.Loc.Get()) {
		var ret string
		return ret
	}
	return *o.Loc.Get()
}

// GetLocOk returns a tuple with the Loc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackingHistoryItem) GetLocOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Loc.Get(), o.Loc.IsSet()
}

// HasLoc returns a boolean if a field has been set.
func (o *TrackingHistoryItem) HasLoc() bool {
	if o != nil && o.Loc.IsSet() {
		return true
	}

	return false
}

// SetLoc gets a reference to the given NullableString and assigns it to the Loc field.
func (o *TrackingHistoryItem) SetLoc(v string) {
	o.Loc.Set(&v)
}
// SetLocNil sets the value for Loc to be an explicit nil
func (o *TrackingHistoryItem) SetLocNil() {
	o.Loc.Set(nil)
}

// UnsetLoc ensures that no value is present for Loc, not even an explicit nil
func (o *TrackingHistoryItem) UnsetLoc() {
	o.Loc.Unset()
}

func (o TrackingHistoryItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackingHistoryItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimestampDate) {
		toSerialize["timestamp_date"] = o.TimestampDate
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Loc.IsSet() {
		toSerialize["loc"] = o.Loc.Get()
	}
	return toSerialize, nil
}

type NullableTrackingHistoryItem struct {
	value *TrackingHistoryItem
	isSet bool
}

func (v NullableTrackingHistoryItem) Get() *TrackingHistoryItem {
	return v.value
}

func (v *NullableTrackingHistoryItem) Set(val *TrackingHistoryItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingHistoryItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingHistoryItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingHistoryItem(val *TrackingHistoryItem) *NullableTrackingHistoryItem {
	return &NullableTrackingHistoryItem{value: val, isSet: true}
}

func (v NullableTrackingHistoryItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingHistoryItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


