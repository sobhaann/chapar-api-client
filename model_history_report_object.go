/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the HistoryReportObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReportObject{}

// HistoryReportObject struct for HistoryReportObject
type HistoryReportObject struct {
	Cn *ConsignmentNote `json:"cn,omitempty"`
	Receiver *ContactInfo `json:"receiver,omitempty"`
	Financial *FinancialInfo `json:"financial,omitempty"`
	History []HistoryItem `json:"history,omitempty"`
}

// NewHistoryReportObject instantiates a new HistoryReportObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReportObject() *HistoryReportObject {
	this := HistoryReportObject{}
	return &this
}

// NewHistoryReportObjectWithDefaults instantiates a new HistoryReportObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReportObjectWithDefaults() *HistoryReportObject {
	this := HistoryReportObject{}
	return &this
}

// GetCn returns the Cn field value if set, zero value otherwise.
func (o *HistoryReportObject) GetCn() ConsignmentNote {
	if o == nil || IsNil(o.Cn) {
		var ret ConsignmentNote
		return ret
	}
	return *o.Cn
}

// GetCnOk returns a tuple with the Cn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetCnOk() (*ConsignmentNote, bool) {
	if o == nil || IsNil(o.Cn) {
		return nil, false
	}
	return o.Cn, true
}

// HasCn returns a boolean if a field has been set.
func (o *HistoryReportObject) HasCn() bool {
	if o != nil && !IsNil(o.Cn) {
		return true
	}

	return false
}

// SetCn gets a reference to the given ConsignmentNote and assigns it to the Cn field.
func (o *HistoryReportObject) SetCn(v ConsignmentNote) {
	o.Cn = &v
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *HistoryReportObject) GetReceiver() ContactInfo {
	if o == nil || IsNil(o.Receiver) {
		var ret ContactInfo
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetReceiverOk() (*ContactInfo, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *HistoryReportObject) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given ContactInfo and assigns it to the Receiver field.
func (o *HistoryReportObject) SetReceiver(v ContactInfo) {
	o.Receiver = &v
}

// GetFinancial returns the Financial field value if set, zero value otherwise.
func (o *HistoryReportObject) GetFinancial() FinancialInfo {
	if o == nil || IsNil(o.Financial) {
		var ret FinancialInfo
		return ret
	}
	return *o.Financial
}

// GetFinancialOk returns a tuple with the Financial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetFinancialOk() (*FinancialInfo, bool) {
	if o == nil || IsNil(o.Financial) {
		return nil, false
	}
	return o.Financial, true
}

// HasFinancial returns a boolean if a field has been set.
func (o *HistoryReportObject) HasFinancial() bool {
	if o != nil && !IsNil(o.Financial) {
		return true
	}

	return false
}

// SetFinancial gets a reference to the given FinancialInfo and assigns it to the Financial field.
func (o *HistoryReportObject) SetFinancial(v FinancialInfo) {
	o.Financial = &v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *HistoryReportObject) GetHistory() []HistoryItem {
	if o == nil || IsNil(o.History) {
		var ret []HistoryItem
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetHistoryOk() ([]HistoryItem, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *HistoryReportObject) HasHistory() bool {
	if o != nil && !IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []HistoryItem and assigns it to the History field.
func (o *HistoryReportObject) SetHistory(v []HistoryItem) {
	o.History = v
}

func (o HistoryReportObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReportObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cn) {
		toSerialize["cn"] = o.Cn
	}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	if !IsNil(o.Financial) {
		toSerialize["financial"] = o.Financial
	}
	if !IsNil(o.History) {
		toSerialize["history"] = o.History
	}
	return toSerialize, nil
}

type NullableHistoryReportObject struct {
	value *HistoryReportObject
	isSet bool
}

func (v NullableHistoryReportObject) Get() *HistoryReportObject {
	return v.value
}

func (v *NullableHistoryReportObject) Set(val *HistoryReportObject) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReportObject) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReportObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReportObject(val *HistoryReportObject) *NullableHistoryReportObject {
	return &NullableHistoryReportObject{value: val, isSet: true}
}

func (v NullableHistoryReportObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReportObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


