/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HistoryReportObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReportObject{}

// HistoryReportObject struct for HistoryReportObject
type HistoryReportObject struct {
	Cn ConsignmentNote `json:"cn"`
	Receiver ReceiverInfo `json:"receiver"`
	Financial FinancialInfo `json:"financial"`
	History []HistoryEvent `json:"history"`
}

type _HistoryReportObject HistoryReportObject

// NewHistoryReportObject instantiates a new HistoryReportObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReportObject(cn ConsignmentNote, receiver ReceiverInfo, financial FinancialInfo, history []HistoryEvent) *HistoryReportObject {
	this := HistoryReportObject{}
	this.Cn = cn
	this.Receiver = receiver
	this.Financial = financial
	this.History = history
	return &this
}

// NewHistoryReportObjectWithDefaults instantiates a new HistoryReportObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReportObjectWithDefaults() *HistoryReportObject {
	this := HistoryReportObject{}
	return &this
}

// GetCn returns the Cn field value
func (o *HistoryReportObject) GetCn() ConsignmentNote {
	if o == nil {
		var ret ConsignmentNote
		return ret
	}

	return o.Cn
}

// GetCnOk returns a tuple with the Cn field value
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetCnOk() (*ConsignmentNote, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cn, true
}

// SetCn sets field value
func (o *HistoryReportObject) SetCn(v ConsignmentNote) {
	o.Cn = v
}

// GetReceiver returns the Receiver field value
func (o *HistoryReportObject) GetReceiver() ReceiverInfo {
	if o == nil {
		var ret ReceiverInfo
		return ret
	}

	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetReceiverOk() (*ReceiverInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receiver, true
}

// SetReceiver sets field value
func (o *HistoryReportObject) SetReceiver(v ReceiverInfo) {
	o.Receiver = v
}

// GetFinancial returns the Financial field value
func (o *HistoryReportObject) GetFinancial() FinancialInfo {
	if o == nil {
		var ret FinancialInfo
		return ret
	}

	return o.Financial
}

// GetFinancialOk returns a tuple with the Financial field value
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetFinancialOk() (*FinancialInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Financial, true
}

// SetFinancial sets field value
func (o *HistoryReportObject) SetFinancial(v FinancialInfo) {
	o.Financial = v
}

// GetHistory returns the History field value
func (o *HistoryReportObject) GetHistory() []HistoryEvent {
	if o == nil {
		var ret []HistoryEvent
		return ret
	}

	return o.History
}

// GetHistoryOk returns a tuple with the History field value
// and a boolean to check if the value has been set.
func (o *HistoryReportObject) GetHistoryOk() ([]HistoryEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.History, true
}

// SetHistory sets field value
func (o *HistoryReportObject) SetHistory(v []HistoryEvent) {
	o.History = v
}

func (o HistoryReportObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReportObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cn"] = o.Cn
	toSerialize["receiver"] = o.Receiver
	toSerialize["financial"] = o.Financial
	toSerialize["history"] = o.History
	return toSerialize, nil
}

func (o *HistoryReportObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cn",
		"receiver",
		"financial",
		"history",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHistoryReportObject := _HistoryReportObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHistoryReportObject)

	if err != nil {
		return err
	}

	*o = HistoryReportObject(varHistoryReportObject)

	return err
}

type NullableHistoryReportObject struct {
	value *HistoryReportObject
	isSet bool
}

func (v NullableHistoryReportObject) Get() *HistoryReportObject {
	return v.value
}

func (v *NullableHistoryReportObject) Set(val *HistoryReportObject) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReportObject) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReportObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReportObject(val *HistoryReportObject) *NullableHistoryReportObject {
	return &NullableHistoryReportObject{value: val, isSet: true}
}

func (v NullableHistoryReportObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReportObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


