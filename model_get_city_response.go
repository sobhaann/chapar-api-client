/*
Chapar Customer API

API for interacting with the Chapar shipping service. All requests are sent with a single query parameter `input` which contains a URL-encoded JSON string payload.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the GetCityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCityResponse{}

// GetCityResponse struct for GetCityResponse
type GetCityResponse struct {
	Objects *CityObjects `json:"objects,omitempty"`
}

// NewGetCityResponse instantiates a new GetCityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCityResponse() *GetCityResponse {
	this := GetCityResponse{}
	return &this
}

// NewGetCityResponseWithDefaults instantiates a new GetCityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCityResponseWithDefaults() *GetCityResponse {
	this := GetCityResponse{}
	return &this
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *GetCityResponse) GetObjects() CityObjects {
	if o == nil || IsNil(o.Objects) {
		var ret CityObjects
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCityResponse) GetObjectsOk() (*CityObjects, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *GetCityResponse) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given CityObjects and assigns it to the Objects field.
func (o *GetCityResponse) SetObjects(v CityObjects) {
	o.Objects = &v
}

func (o GetCityResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	return toSerialize, nil
}

type NullableGetCityResponse struct {
	value *GetCityResponse
	isSet bool
}

func (v NullableGetCityResponse) Get() *GetCityResponse {
	return v.value
}

func (v *NullableGetCityResponse) Set(val *GetCityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCityResponse(val *GetCityResponse) *NullableGetCityResponse {
	return &NullableGetCityResponse{value: val, isSet: true}
}

func (v NullableGetCityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


