/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrackingObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackingObject{}

// TrackingObject struct for TrackingObject
type TrackingObject struct {
	Order TrackingObjectOrder `json:"order"`
}

type _TrackingObject TrackingObject

// NewTrackingObject instantiates a new TrackingObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingObject(order TrackingObjectOrder) *TrackingObject {
	this := TrackingObject{}
	this.Order = order
	return &this
}

// NewTrackingObjectWithDefaults instantiates a new TrackingObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingObjectWithDefaults() *TrackingObject {
	this := TrackingObject{}
	return &this
}

// GetOrder returns the Order field value
func (o *TrackingObject) GetOrder() TrackingObjectOrder {
	if o == nil {
		var ret TrackingObjectOrder
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *TrackingObject) GetOrderOk() (*TrackingObjectOrder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *TrackingObject) SetOrder(v TrackingObjectOrder) {
	o.Order = v
}

func (o TrackingObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackingObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["order"] = o.Order
	return toSerialize, nil
}

func (o *TrackingObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackingObject := _TrackingObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackingObject)

	if err != nil {
		return err
	}

	*o = TrackingObject(varTrackingObject)

	return err
}

type NullableTrackingObject struct {
	value *TrackingObject
	isSet bool
}

func (v NullableTrackingObject) Get() *TrackingObject {
	return v.value
}

func (v *NullableTrackingObject) Set(val *TrackingObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingObject(val *TrackingObject) *NullableTrackingObject {
	return &NullableTrackingObject{value: val, isSet: true}
}

func (v NullableTrackingObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


