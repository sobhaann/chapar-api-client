/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReceiverInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReceiverInfo{}

// ReceiverInfo struct for ReceiverInfo
type ReceiverInfo struct {
	Person string `json:"person"`
	Company NullableString `json:"company,omitempty"`
}

type _ReceiverInfo ReceiverInfo

// NewReceiverInfo instantiates a new ReceiverInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceiverInfo(person string) *ReceiverInfo {
	this := ReceiverInfo{}
	this.Person = person
	return &this
}

// NewReceiverInfoWithDefaults instantiates a new ReceiverInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiverInfoWithDefaults() *ReceiverInfo {
	this := ReceiverInfo{}
	return &this
}

// GetPerson returns the Person field value
func (o *ReceiverInfo) GetPerson() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Person
}

// GetPersonOk returns a tuple with the Person field value
// and a boolean to check if the value has been set.
func (o *ReceiverInfo) GetPersonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Person, true
}

// SetPerson sets field value
func (o *ReceiverInfo) SetPerson(v string) {
	o.Person = v
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceiverInfo) GetCompany() string {
	if o == nil || IsNil(o.Company.Get()) {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceiverInfo) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *ReceiverInfo) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *ReceiverInfo) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *ReceiverInfo) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *ReceiverInfo) UnsetCompany() {
	o.Company.Unset()
}

func (o ReceiverInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReceiverInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["person"] = o.Person
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	return toSerialize, nil
}

func (o *ReceiverInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"person",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReceiverInfo := _ReceiverInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReceiverInfo)

	if err != nil {
		return err
	}

	*o = ReceiverInfo(varReceiverInfo)

	return err
}

type NullableReceiverInfo struct {
	value *ReceiverInfo
	isSet bool
}

func (v NullableReceiverInfo) Get() *ReceiverInfo {
	return v.value
}

func (v *NullableReceiverInfo) Set(val *ReceiverInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiverInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiverInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiverInfo(val *ReceiverInfo) *NullableReceiverInfo {
	return &NullableReceiverInfo{value: val, isSet: true}
}

func (v NullableReceiverInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiverInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


