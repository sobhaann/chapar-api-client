/*
Chapar Customer API

API for interacting with the Chapar shipping service.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the ReceiverInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReceiverInfo{}

// ReceiverInfo struct for ReceiverInfo
type ReceiverInfo struct {
	Person *string `json:"person,omitempty"`
	Company NullableString `json:"company,omitempty"`
	City *string `json:"city,omitempty"`
	Telephone *string `json:"telephone,omitempty"`
	Mobile *string `json:"mobile,omitempty"`
	Address *string `json:"address,omitempty"`
	PostCode NullableString `json:"post_code,omitempty"`
}

// NewReceiverInfo instantiates a new ReceiverInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceiverInfo() *ReceiverInfo {
	this := ReceiverInfo{}
	return &this
}

// NewReceiverInfoWithDefaults instantiates a new ReceiverInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiverInfoWithDefaults() *ReceiverInfo {
	this := ReceiverInfo{}
	return &this
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *ReceiverInfo) GetPerson() string {
	if o == nil || IsNil(o.Person) {
		var ret string
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiverInfo) GetPersonOk() (*string, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *ReceiverInfo) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given string and assigns it to the Person field.
func (o *ReceiverInfo) SetPerson(v string) {
	o.Person = &v
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceiverInfo) GetCompany() string {
	if o == nil || IsNil(o.Company.Get()) {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceiverInfo) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *ReceiverInfo) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *ReceiverInfo) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *ReceiverInfo) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *ReceiverInfo) UnsetCompany() {
	o.Company.Unset()
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *ReceiverInfo) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiverInfo) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *ReceiverInfo) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *ReceiverInfo) SetCity(v string) {
	o.City = &v
}

// GetTelephone returns the Telephone field value if set, zero value otherwise.
func (o *ReceiverInfo) GetTelephone() string {
	if o == nil || IsNil(o.Telephone) {
		var ret string
		return ret
	}
	return *o.Telephone
}

// GetTelephoneOk returns a tuple with the Telephone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiverInfo) GetTelephoneOk() (*string, bool) {
	if o == nil || IsNil(o.Telephone) {
		return nil, false
	}
	return o.Telephone, true
}

// HasTelephone returns a boolean if a field has been set.
func (o *ReceiverInfo) HasTelephone() bool {
	if o != nil && !IsNil(o.Telephone) {
		return true
	}

	return false
}

// SetTelephone gets a reference to the given string and assigns it to the Telephone field.
func (o *ReceiverInfo) SetTelephone(v string) {
	o.Telephone = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *ReceiverInfo) GetMobile() string {
	if o == nil || IsNil(o.Mobile) {
		var ret string
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiverInfo) GetMobileOk() (*string, bool) {
	if o == nil || IsNil(o.Mobile) {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *ReceiverInfo) HasMobile() bool {
	if o != nil && !IsNil(o.Mobile) {
		return true
	}

	return false
}

// SetMobile gets a reference to the given string and assigns it to the Mobile field.
func (o *ReceiverInfo) SetMobile(v string) {
	o.Mobile = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ReceiverInfo) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiverInfo) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ReceiverInfo) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ReceiverInfo) SetAddress(v string) {
	o.Address = &v
}

// GetPostCode returns the PostCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceiverInfo) GetPostCode() string {
	if o == nil || IsNil(o.PostCode.Get()) {
		var ret string
		return ret
	}
	return *o.PostCode.Get()
}

// GetPostCodeOk returns a tuple with the PostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceiverInfo) GetPostCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostCode.Get(), o.PostCode.IsSet()
}

// HasPostCode returns a boolean if a field has been set.
func (o *ReceiverInfo) HasPostCode() bool {
	if o != nil && o.PostCode.IsSet() {
		return true
	}

	return false
}

// SetPostCode gets a reference to the given NullableString and assigns it to the PostCode field.
func (o *ReceiverInfo) SetPostCode(v string) {
	o.PostCode.Set(&v)
}
// SetPostCodeNil sets the value for PostCode to be an explicit nil
func (o *ReceiverInfo) SetPostCodeNil() {
	o.PostCode.Set(nil)
}

// UnsetPostCode ensures that no value is present for PostCode, not even an explicit nil
func (o *ReceiverInfo) UnsetPostCode() {
	o.PostCode.Unset()
}

func (o ReceiverInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReceiverInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Telephone) {
		toSerialize["telephone"] = o.Telephone
	}
	if !IsNil(o.Mobile) {
		toSerialize["mobile"] = o.Mobile
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if o.PostCode.IsSet() {
		toSerialize["post_code"] = o.PostCode.Get()
	}
	return toSerialize, nil
}

type NullableReceiverInfo struct {
	value *ReceiverInfo
	isSet bool
}

func (v NullableReceiverInfo) Get() *ReceiverInfo {
	return v.value
}

func (v *NullableReceiverInfo) Set(val *ReceiverInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiverInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiverInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiverInfo(val *ReceiverInfo) *NullableReceiverInfo {
	return &NullableReceiverInfo{value: val, isSet: true}
}

func (v NullableReceiverInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiverInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


