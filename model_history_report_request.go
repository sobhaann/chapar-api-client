/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HistoryReportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReportRequest{}

// HistoryReportRequest The main payload for history report, to be sent as a stringified JSON in the 'input' field.
type HistoryReportRequest struct {
	User User `json:"user"`
	Date HistoryReportRequestDate `json:"date"`
	MaximumRecords *int32 `json:"maximum_records,omitempty"`
}

type _HistoryReportRequest HistoryReportRequest

// NewHistoryReportRequest instantiates a new HistoryReportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReportRequest(user User, date HistoryReportRequestDate) *HistoryReportRequest {
	this := HistoryReportRequest{}
	this.User = user
	this.Date = date
	return &this
}

// NewHistoryReportRequestWithDefaults instantiates a new HistoryReportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReportRequestWithDefaults() *HistoryReportRequest {
	this := HistoryReportRequest{}
	return &this
}

// GetUser returns the User field value
func (o *HistoryReportRequest) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *HistoryReportRequest) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *HistoryReportRequest) SetUser(v User) {
	o.User = v
}

// GetDate returns the Date field value
func (o *HistoryReportRequest) GetDate() HistoryReportRequestDate {
	if o == nil {
		var ret HistoryReportRequestDate
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *HistoryReportRequest) GetDateOk() (*HistoryReportRequestDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *HistoryReportRequest) SetDate(v HistoryReportRequestDate) {
	o.Date = v
}

// GetMaximumRecords returns the MaximumRecords field value if set, zero value otherwise.
func (o *HistoryReportRequest) GetMaximumRecords() int32 {
	if o == nil || IsNil(o.MaximumRecords) {
		var ret int32
		return ret
	}
	return *o.MaximumRecords
}

// GetMaximumRecordsOk returns a tuple with the MaximumRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryReportRequest) GetMaximumRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumRecords) {
		return nil, false
	}
	return o.MaximumRecords, true
}

// HasMaximumRecords returns a boolean if a field has been set.
func (o *HistoryReportRequest) HasMaximumRecords() bool {
	if o != nil && !IsNil(o.MaximumRecords) {
		return true
	}

	return false
}

// SetMaximumRecords gets a reference to the given int32 and assigns it to the MaximumRecords field.
func (o *HistoryReportRequest) SetMaximumRecords(v int32) {
	o.MaximumRecords = &v
}

func (o HistoryReportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["date"] = o.Date
	if !IsNil(o.MaximumRecords) {
		toSerialize["maximum_records"] = o.MaximumRecords
	}
	return toSerialize, nil
}

func (o *HistoryReportRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHistoryReportRequest := _HistoryReportRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHistoryReportRequest)

	if err != nil {
		return err
	}

	*o = HistoryReportRequest(varHistoryReportRequest)

	return err
}

type NullableHistoryReportRequest struct {
	value *HistoryReportRequest
	isSet bool
}

func (v NullableHistoryReportRequest) Get() *HistoryReportRequest {
	return v.value
}

func (v *NullableHistoryReportRequest) Set(val *HistoryReportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReportRequest(val *HistoryReportRequest) *NullableHistoryReportRequest {
	return &NullableHistoryReportRequest{value: val, isSet: true}
}

func (v NullableHistoryReportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


