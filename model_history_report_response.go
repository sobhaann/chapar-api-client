/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HistoryReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryReportResponse{}

// HistoryReportResponse struct for HistoryReportResponse
type HistoryReportResponse struct {
	Result bool `json:"result"`
	Message NullableString `json:"message,omitempty"`
	Objects HistoryReportObject `json:"objects"`
}

type _HistoryReportResponse HistoryReportResponse

// NewHistoryReportResponse instantiates a new HistoryReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryReportResponse(result bool, objects HistoryReportObject) *HistoryReportResponse {
	this := HistoryReportResponse{}
	this.Result = result
	this.Objects = objects
	return &this
}

// NewHistoryReportResponseWithDefaults instantiates a new HistoryReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryReportResponseWithDefaults() *HistoryReportResponse {
	this := HistoryReportResponse{}
	return &this
}

// GetResult returns the Result field value
func (o *HistoryReportResponse) GetResult() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *HistoryReportResponse) GetResultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *HistoryReportResponse) SetResult(v bool) {
	o.Result = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoryReportResponse) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoryReportResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *HistoryReportResponse) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *HistoryReportResponse) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *HistoryReportResponse) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *HistoryReportResponse) UnsetMessage() {
	o.Message.Unset()
}

// GetObjects returns the Objects field value
func (o *HistoryReportResponse) GetObjects() HistoryReportObject {
	if o == nil {
		var ret HistoryReportObject
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *HistoryReportResponse) GetObjectsOk() (*HistoryReportObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Objects, true
}

// SetObjects sets field value
func (o *HistoryReportResponse) SetObjects(v HistoryReportObject) {
	o.Objects = v
}

func (o HistoryReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	toSerialize["objects"] = o.Objects
	return toSerialize, nil
}

func (o *HistoryReportResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHistoryReportResponse := _HistoryReportResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHistoryReportResponse)

	if err != nil {
		return err
	}

	*o = HistoryReportResponse(varHistoryReportResponse)

	return err
}

type NullableHistoryReportResponse struct {
	value *HistoryReportResponse
	isSet bool
}

func (v NullableHistoryReportResponse) Get() *HistoryReportResponse {
	return v.value
}

func (v *NullableHistoryReportResponse) Set(val *HistoryReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryReportResponse(val *HistoryReportResponse) *NullableHistoryReportResponse {
	return &NullableHistoryReportResponse{value: val, isSet: true}
}

func (v NullableHistoryReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


