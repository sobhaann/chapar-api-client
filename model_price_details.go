/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PriceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceDetails{}

// PriceDetails struct for PriceDetails
type PriceDetails struct {
	Zone string `json:"zone"`
	FldManualCost int32 `json:"fld_Manual_Cost"`
	FldPackCost *int32 `json:"fld_Pack_Cost,omitempty"`
	FldChargeCost *int32 `json:"fld_Charge_Cost,omitempty"`
	FldManualInsurance *int32 `json:"fld_Manual_Insurance,omitempty"`
	FldLabCost *int32 `json:"fld_Lab_Cost,omitempty"`
	FldManualVAT *int32 `json:"fld_Manual_VAT,omitempty"`
	FldTotalCost int32 `json:"fld_Total_Cost"`
	PriceList *string `json:"price_list,omitempty"`
	MinIns *string `json:"min_ins,omitempty"`
}

type _PriceDetails PriceDetails

// NewPriceDetails instantiates a new PriceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceDetails(zone string, fldManualCost int32, fldTotalCost int32) *PriceDetails {
	this := PriceDetails{}
	this.Zone = zone
	this.FldManualCost = fldManualCost
	this.FldTotalCost = fldTotalCost
	return &this
}

// NewPriceDetailsWithDefaults instantiates a new PriceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceDetailsWithDefaults() *PriceDetails {
	this := PriceDetails{}
	return &this
}

// GetZone returns the Zone field value
func (o *PriceDetails) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *PriceDetails) SetZone(v string) {
	o.Zone = v
}

// GetFldManualCost returns the FldManualCost field value
func (o *PriceDetails) GetFldManualCost() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FldManualCost
}

// GetFldManualCostOk returns a tuple with the FldManualCost field value
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFldManualCostOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FldManualCost, true
}

// SetFldManualCost sets field value
func (o *PriceDetails) SetFldManualCost(v int32) {
	o.FldManualCost = v
}

// GetFldPackCost returns the FldPackCost field value if set, zero value otherwise.
func (o *PriceDetails) GetFldPackCost() int32 {
	if o == nil || IsNil(o.FldPackCost) {
		var ret int32
		return ret
	}
	return *o.FldPackCost
}

// GetFldPackCostOk returns a tuple with the FldPackCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFldPackCostOk() (*int32, bool) {
	if o == nil || IsNil(o.FldPackCost) {
		return nil, false
	}
	return o.FldPackCost, true
}

// HasFldPackCost returns a boolean if a field has been set.
func (o *PriceDetails) HasFldPackCost() bool {
	if o != nil && !IsNil(o.FldPackCost) {
		return true
	}

	return false
}

// SetFldPackCost gets a reference to the given int32 and assigns it to the FldPackCost field.
func (o *PriceDetails) SetFldPackCost(v int32) {
	o.FldPackCost = &v
}

// GetFldChargeCost returns the FldChargeCost field value if set, zero value otherwise.
func (o *PriceDetails) GetFldChargeCost() int32 {
	if o == nil || IsNil(o.FldChargeCost) {
		var ret int32
		return ret
	}
	return *o.FldChargeCost
}

// GetFldChargeCostOk returns a tuple with the FldChargeCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFldChargeCostOk() (*int32, bool) {
	if o == nil || IsNil(o.FldChargeCost) {
		return nil, false
	}
	return o.FldChargeCost, true
}

// HasFldChargeCost returns a boolean if a field has been set.
func (o *PriceDetails) HasFldChargeCost() bool {
	if o != nil && !IsNil(o.FldChargeCost) {
		return true
	}

	return false
}

// SetFldChargeCost gets a reference to the given int32 and assigns it to the FldChargeCost field.
func (o *PriceDetails) SetFldChargeCost(v int32) {
	o.FldChargeCost = &v
}

// GetFldManualInsurance returns the FldManualInsurance field value if set, zero value otherwise.
func (o *PriceDetails) GetFldManualInsurance() int32 {
	if o == nil || IsNil(o.FldManualInsurance) {
		var ret int32
		return ret
	}
	return *o.FldManualInsurance
}

// GetFldManualInsuranceOk returns a tuple with the FldManualInsurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFldManualInsuranceOk() (*int32, bool) {
	if o == nil || IsNil(o.FldManualInsurance) {
		return nil, false
	}
	return o.FldManualInsurance, true
}

// HasFldManualInsurance returns a boolean if a field has been set.
func (o *PriceDetails) HasFldManualInsurance() bool {
	if o != nil && !IsNil(o.FldManualInsurance) {
		return true
	}

	return false
}

// SetFldManualInsurance gets a reference to the given int32 and assigns it to the FldManualInsurance field.
func (o *PriceDetails) SetFldManualInsurance(v int32) {
	o.FldManualInsurance = &v
}

// GetFldLabCost returns the FldLabCost field value if set, zero value otherwise.
func (o *PriceDetails) GetFldLabCost() int32 {
	if o == nil || IsNil(o.FldLabCost) {
		var ret int32
		return ret
	}
	return *o.FldLabCost
}

// GetFldLabCostOk returns a tuple with the FldLabCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFldLabCostOk() (*int32, bool) {
	if o == nil || IsNil(o.FldLabCost) {
		return nil, false
	}
	return o.FldLabCost, true
}

// HasFldLabCost returns a boolean if a field has been set.
func (o *PriceDetails) HasFldLabCost() bool {
	if o != nil && !IsNil(o.FldLabCost) {
		return true
	}

	return false
}

// SetFldLabCost gets a reference to the given int32 and assigns it to the FldLabCost field.
func (o *PriceDetails) SetFldLabCost(v int32) {
	o.FldLabCost = &v
}

// GetFldManualVAT returns the FldManualVAT field value if set, zero value otherwise.
func (o *PriceDetails) GetFldManualVAT() int32 {
	if o == nil || IsNil(o.FldManualVAT) {
		var ret int32
		return ret
	}
	return *o.FldManualVAT
}

// GetFldManualVATOk returns a tuple with the FldManualVAT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFldManualVATOk() (*int32, bool) {
	if o == nil || IsNil(o.FldManualVAT) {
		return nil, false
	}
	return o.FldManualVAT, true
}

// HasFldManualVAT returns a boolean if a field has been set.
func (o *PriceDetails) HasFldManualVAT() bool {
	if o != nil && !IsNil(o.FldManualVAT) {
		return true
	}

	return false
}

// SetFldManualVAT gets a reference to the given int32 and assigns it to the FldManualVAT field.
func (o *PriceDetails) SetFldManualVAT(v int32) {
	o.FldManualVAT = &v
}

// GetFldTotalCost returns the FldTotalCost field value
func (o *PriceDetails) GetFldTotalCost() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FldTotalCost
}

// GetFldTotalCostOk returns a tuple with the FldTotalCost field value
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFldTotalCostOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FldTotalCost, true
}

// SetFldTotalCost sets field value
func (o *PriceDetails) SetFldTotalCost(v int32) {
	o.FldTotalCost = v
}

// GetPriceList returns the PriceList field value if set, zero value otherwise.
func (o *PriceDetails) GetPriceList() string {
	if o == nil || IsNil(o.PriceList) {
		var ret string
		return ret
	}
	return *o.PriceList
}

// GetPriceListOk returns a tuple with the PriceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetPriceListOk() (*string, bool) {
	if o == nil || IsNil(o.PriceList) {
		return nil, false
	}
	return o.PriceList, true
}

// HasPriceList returns a boolean if a field has been set.
func (o *PriceDetails) HasPriceList() bool {
	if o != nil && !IsNil(o.PriceList) {
		return true
	}

	return false
}

// SetPriceList gets a reference to the given string and assigns it to the PriceList field.
func (o *PriceDetails) SetPriceList(v string) {
	o.PriceList = &v
}

// GetMinIns returns the MinIns field value if set, zero value otherwise.
func (o *PriceDetails) GetMinIns() string {
	if o == nil || IsNil(o.MinIns) {
		var ret string
		return ret
	}
	return *o.MinIns
}

// GetMinInsOk returns a tuple with the MinIns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetMinInsOk() (*string, bool) {
	if o == nil || IsNil(o.MinIns) {
		return nil, false
	}
	return o.MinIns, true
}

// HasMinIns returns a boolean if a field has been set.
func (o *PriceDetails) HasMinIns() bool {
	if o != nil && !IsNil(o.MinIns) {
		return true
	}

	return false
}

// SetMinIns gets a reference to the given string and assigns it to the MinIns field.
func (o *PriceDetails) SetMinIns(v string) {
	o.MinIns = &v
}

func (o PriceDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zone"] = o.Zone
	toSerialize["fld_Manual_Cost"] = o.FldManualCost
	if !IsNil(o.FldPackCost) {
		toSerialize["fld_Pack_Cost"] = o.FldPackCost
	}
	if !IsNil(o.FldChargeCost) {
		toSerialize["fld_Charge_Cost"] = o.FldChargeCost
	}
	if !IsNil(o.FldManualInsurance) {
		toSerialize["fld_Manual_Insurance"] = o.FldManualInsurance
	}
	if !IsNil(o.FldLabCost) {
		toSerialize["fld_Lab_Cost"] = o.FldLabCost
	}
	if !IsNil(o.FldManualVAT) {
		toSerialize["fld_Manual_VAT"] = o.FldManualVAT
	}
	toSerialize["fld_Total_Cost"] = o.FldTotalCost
	if !IsNil(o.PriceList) {
		toSerialize["price_list"] = o.PriceList
	}
	if !IsNil(o.MinIns) {
		toSerialize["min_ins"] = o.MinIns
	}
	return toSerialize, nil
}

func (o *PriceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zone",
		"fld_Manual_Cost",
		"fld_Total_Cost",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPriceDetails := _PriceDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPriceDetails)

	if err != nil {
		return err
	}

	*o = PriceDetails(varPriceDetails)

	return err
}

type NullablePriceDetails struct {
	value *PriceDetails
	isSet bool
}

func (v NullablePriceDetails) Get() *PriceDetails {
	return v.value
}

func (v *NullablePriceDetails) Set(val *PriceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceDetails(val *PriceDetails) *NullablePriceDetails {
	return &NullablePriceDetails{value: val, isSet: true}
}

func (v NullablePriceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


