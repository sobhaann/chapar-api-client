/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the HistoryEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryEvent{}

// HistoryEvent struct for HistoryEvent
type HistoryEvent struct {
	TimestampDate *int32 `json:"timestamp_date,omitempty"`
	Date *string `json:"date,omitempty"`
	Status *string `json:"status,omitempty"`
	StatusNote *string `json:"status_note,omitempty"`
}

// NewHistoryEvent instantiates a new HistoryEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryEvent() *HistoryEvent {
	this := HistoryEvent{}
	return &this
}

// NewHistoryEventWithDefaults instantiates a new HistoryEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryEventWithDefaults() *HistoryEvent {
	this := HistoryEvent{}
	return &this
}

// GetTimestampDate returns the TimestampDate field value if set, zero value otherwise.
func (o *HistoryEvent) GetTimestampDate() int32 {
	if o == nil || IsNil(o.TimestampDate) {
		var ret int32
		return ret
	}
	return *o.TimestampDate
}

// GetTimestampDateOk returns a tuple with the TimestampDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEvent) GetTimestampDateOk() (*int32, bool) {
	if o == nil || IsNil(o.TimestampDate) {
		return nil, false
	}
	return o.TimestampDate, true
}

// HasTimestampDate returns a boolean if a field has been set.
func (o *HistoryEvent) HasTimestampDate() bool {
	if o != nil && !IsNil(o.TimestampDate) {
		return true
	}

	return false
}

// SetTimestampDate gets a reference to the given int32 and assigns it to the TimestampDate field.
func (o *HistoryEvent) SetTimestampDate(v int32) {
	o.TimestampDate = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HistoryEvent) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEvent) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HistoryEvent) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *HistoryEvent) SetDate(v string) {
	o.Date = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HistoryEvent) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEvent) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HistoryEvent) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HistoryEvent) SetStatus(v string) {
	o.Status = &v
}

// GetStatusNote returns the StatusNote field value if set, zero value otherwise.
func (o *HistoryEvent) GetStatusNote() string {
	if o == nil || IsNil(o.StatusNote) {
		var ret string
		return ret
	}
	return *o.StatusNote
}

// GetStatusNoteOk returns a tuple with the StatusNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEvent) GetStatusNoteOk() (*string, bool) {
	if o == nil || IsNil(o.StatusNote) {
		return nil, false
	}
	return o.StatusNote, true
}

// HasStatusNote returns a boolean if a field has been set.
func (o *HistoryEvent) HasStatusNote() bool {
	if o != nil && !IsNil(o.StatusNote) {
		return true
	}

	return false
}

// SetStatusNote gets a reference to the given string and assigns it to the StatusNote field.
func (o *HistoryEvent) SetStatusNote(v string) {
	o.StatusNote = &v
}

func (o HistoryEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimestampDate) {
		toSerialize["timestamp_date"] = o.TimestampDate
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusNote) {
		toSerialize["status_note"] = o.StatusNote
	}
	return toSerialize, nil
}

type NullableHistoryEvent struct {
	value *HistoryEvent
	isSet bool
}

func (v NullableHistoryEvent) Get() *HistoryEvent {
	return v.value
}

func (v *NullableHistoryEvent) Set(val *HistoryEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryEvent(val *HistoryEvent) *NullableHistoryEvent {
	return &NullableHistoryEvent{value: val, isSet: true}
}

func (v NullableHistoryEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


