/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HistoryEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryEvent{}

// HistoryEvent struct for HistoryEvent
type HistoryEvent struct {
	Status string `json:"status"`
	StatusNote string `json:"status_note"`
}

type _HistoryEvent HistoryEvent

// NewHistoryEvent instantiates a new HistoryEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryEvent(status string, statusNote string) *HistoryEvent {
	this := HistoryEvent{}
	this.Status = status
	this.StatusNote = statusNote
	return &this
}

// NewHistoryEventWithDefaults instantiates a new HistoryEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryEventWithDefaults() *HistoryEvent {
	this := HistoryEvent{}
	return &this
}

// GetStatus returns the Status field value
func (o *HistoryEvent) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *HistoryEvent) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *HistoryEvent) SetStatus(v string) {
	o.Status = v
}

// GetStatusNote returns the StatusNote field value
func (o *HistoryEvent) GetStatusNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusNote
}

// GetStatusNoteOk returns a tuple with the StatusNote field value
// and a boolean to check if the value has been set.
func (o *HistoryEvent) GetStatusNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusNote, true
}

// SetStatusNote sets field value
func (o *HistoryEvent) SetStatusNote(v string) {
	o.StatusNote = v
}

func (o HistoryEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["status_note"] = o.StatusNote
	return toSerialize, nil
}

func (o *HistoryEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"status_note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHistoryEvent := _HistoryEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHistoryEvent)

	if err != nil {
		return err
	}

	*o = HistoryEvent(varHistoryEvent)

	return err
}

type NullableHistoryEvent struct {
	value *HistoryEvent
	isSet bool
}

func (v NullableHistoryEvent) Get() *HistoryEvent {
	return v.value
}

func (v *NullableHistoryEvent) Set(val *HistoryEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryEvent(val *HistoryEvent) *NullableHistoryEvent {
	return &NullableHistoryEvent{value: val, isSet: true}
}

func (v NullableHistoryEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


