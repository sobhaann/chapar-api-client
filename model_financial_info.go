/*
Chapar Customer API

API for interacting with the Chapar shipping service. All POST requests use a unique `multipart/form-data` structure where the main payload is a JSON string inside a form field named `input`.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FinancialInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialInfo{}

// FinancialInfo struct for FinancialInfo
type FinancialInfo struct {
	DeliveryCharge string `json:"delivery_charge"`
	TotalCharge int32 `json:"total_charge"`
}

type _FinancialInfo FinancialInfo

// NewFinancialInfo instantiates a new FinancialInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialInfo(deliveryCharge string, totalCharge int32) *FinancialInfo {
	this := FinancialInfo{}
	this.DeliveryCharge = deliveryCharge
	this.TotalCharge = totalCharge
	return &this
}

// NewFinancialInfoWithDefaults instantiates a new FinancialInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialInfoWithDefaults() *FinancialInfo {
	this := FinancialInfo{}
	return &this
}

// GetDeliveryCharge returns the DeliveryCharge field value
func (o *FinancialInfo) GetDeliveryCharge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeliveryCharge
}

// GetDeliveryChargeOk returns a tuple with the DeliveryCharge field value
// and a boolean to check if the value has been set.
func (o *FinancialInfo) GetDeliveryChargeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryCharge, true
}

// SetDeliveryCharge sets field value
func (o *FinancialInfo) SetDeliveryCharge(v string) {
	o.DeliveryCharge = v
}

// GetTotalCharge returns the TotalCharge field value
func (o *FinancialInfo) GetTotalCharge() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCharge
}

// GetTotalChargeOk returns a tuple with the TotalCharge field value
// and a boolean to check if the value has been set.
func (o *FinancialInfo) GetTotalChargeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCharge, true
}

// SetTotalCharge sets field value
func (o *FinancialInfo) SetTotalCharge(v int32) {
	o.TotalCharge = v
}

func (o FinancialInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delivery_charge"] = o.DeliveryCharge
	toSerialize["total_charge"] = o.TotalCharge
	return toSerialize, nil
}

func (o *FinancialInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delivery_charge",
		"total_charge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinancialInfo := _FinancialInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinancialInfo)

	if err != nil {
		return err
	}

	*o = FinancialInfo(varFinancialInfo)

	return err
}

type NullableFinancialInfo struct {
	value *FinancialInfo
	isSet bool
}

func (v NullableFinancialInfo) Get() *FinancialInfo {
	return v.value
}

func (v *NullableFinancialInfo) Set(val *FinancialInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialInfo(val *FinancialInfo) *NullableFinancialInfo {
	return &NullableFinancialInfo{value: val, isSet: true}
}

func (v NullableFinancialInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


