/*
Chapar Customer API

API for interacting with the Chapar shipping service. Note the unique request format: POST requests use a multipart/form-data body with a single field named \"input\" that contains a stringified JSON payload.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the StateItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StateItem{}

// StateItem struct for StateItem
type StateItem struct {
	False *string `json:"false,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewStateItem instantiates a new StateItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateItem() *StateItem {
	this := StateItem{}
	return &this
}

// NewStateItemWithDefaults instantiates a new StateItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateItemWithDefaults() *StateItem {
	this := StateItem{}
	return &this
}

// GetFalse returns the False field value if set, zero value otherwise.
func (o *StateItem) GetFalse() string {
	if o == nil || IsNil(o.False) {
		var ret string
		return ret
	}
	return *o.False
}

// GetFalseOk returns a tuple with the False field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateItem) GetFalseOk() (*string, bool) {
	if o == nil || IsNil(o.False) {
		return nil, false
	}
	return o.False, true
}

// HasFalse returns a boolean if a field has been set.
func (o *StateItem) HasFalse() bool {
	if o != nil && !IsNil(o.False) {
		return true
	}

	return false
}

// SetFalse gets a reference to the given string and assigns it to the False field.
func (o *StateItem) SetFalse(v string) {
	o.False = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StateItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StateItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StateItem) SetName(v string) {
	o.Name = &v
}

func (o StateItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StateItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.False) {
		toSerialize["false"] = o.False
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableStateItem struct {
	value *StateItem
	isSet bool
}

func (v NullableStateItem) Get() *StateItem {
	return v.value
}

func (v *NullableStateItem) Set(val *StateItem) {
	v.value = val
	v.isSet = true
}

func (v NullableStateItem) IsSet() bool {
	return v.isSet
}

func (v *NullableStateItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateItem(val *StateItem) *NullableStateItem {
	return &NullableStateItem{value: val, isSet: true}
}

func (v NullableStateItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


