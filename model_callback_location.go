/*
Chapar Customer API

API for interacting with the Chapar shipping service. All requests are sent with a single query parameter `input` which contains a URL-encoded JSON string payload.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the CallbackLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallbackLocation{}

// CallbackLocation struct for CallbackLocation
type CallbackLocation struct {
	City *string `json:"city,omitempty"`
	Lat *string `json:"lat,omitempty"`
	Lng *string `json:"lng,omitempty"`
}

// NewCallbackLocation instantiates a new CallbackLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallbackLocation() *CallbackLocation {
	this := CallbackLocation{}
	return &this
}

// NewCallbackLocationWithDefaults instantiates a new CallbackLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallbackLocationWithDefaults() *CallbackLocation {
	this := CallbackLocation{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CallbackLocation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackLocation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CallbackLocation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CallbackLocation) SetCity(v string) {
	o.City = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *CallbackLocation) GetLat() string {
	if o == nil || IsNil(o.Lat) {
		var ret string
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackLocation) GetLatOk() (*string, bool) {
	if o == nil || IsNil(o.Lat) {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *CallbackLocation) HasLat() bool {
	if o != nil && !IsNil(o.Lat) {
		return true
	}

	return false
}

// SetLat gets a reference to the given string and assigns it to the Lat field.
func (o *CallbackLocation) SetLat(v string) {
	o.Lat = &v
}

// GetLng returns the Lng field value if set, zero value otherwise.
func (o *CallbackLocation) GetLng() string {
	if o == nil || IsNil(o.Lng) {
		var ret string
		return ret
	}
	return *o.Lng
}

// GetLngOk returns a tuple with the Lng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackLocation) GetLngOk() (*string, bool) {
	if o == nil || IsNil(o.Lng) {
		return nil, false
	}
	return o.Lng, true
}

// HasLng returns a boolean if a field has been set.
func (o *CallbackLocation) HasLng() bool {
	if o != nil && !IsNil(o.Lng) {
		return true
	}

	return false
}

// SetLng gets a reference to the given string and assigns it to the Lng field.
func (o *CallbackLocation) SetLng(v string) {
	o.Lng = &v
}

func (o CallbackLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallbackLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Lat) {
		toSerialize["lat"] = o.Lat
	}
	if !IsNil(o.Lng) {
		toSerialize["lng"] = o.Lng
	}
	return toSerialize, nil
}

type NullableCallbackLocation struct {
	value *CallbackLocation
	isSet bool
}

func (v NullableCallbackLocation) Get() *CallbackLocation {
	return v.value
}

func (v *NullableCallbackLocation) Set(val *CallbackLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableCallbackLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableCallbackLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallbackLocation(val *CallbackLocation) *NullableCallbackLocation {
	return &NullableCallbackLocation{value: val, isSet: true}
}

func (v NullableCallbackLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallbackLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


