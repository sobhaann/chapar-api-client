/*
Chapar Customer API

API for interacting with the Chapar shipping service. All requests are sent with a single query parameter `input` which contains a URL-encoded JSON string payload.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the BulkConsignmentNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkConsignmentNote{}

// BulkConsignmentNote struct for BulkConsignmentNote
type BulkConsignmentNote struct {
	Reference *int32 `json:"reference,omitempty"`
	Date *string `json:"date,omitempty"`
	AssingedPieces *string `json:"assinged_pieces,omitempty"`
	Service *string `json:"service,omitempty"`
	Value *string `json:"value,omitempty"`
	ChangeStateUrl *string `json:"change_state_url,omitempty"`
}

// NewBulkConsignmentNote instantiates a new BulkConsignmentNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkConsignmentNote() *BulkConsignmentNote {
	this := BulkConsignmentNote{}
	return &this
}

// NewBulkConsignmentNoteWithDefaults instantiates a new BulkConsignmentNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkConsignmentNoteWithDefaults() *BulkConsignmentNote {
	this := BulkConsignmentNote{}
	return &this
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *BulkConsignmentNote) GetReference() int32 {
	if o == nil || IsNil(o.Reference) {
		var ret int32
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkConsignmentNote) GetReferenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *BulkConsignmentNote) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given int32 and assigns it to the Reference field.
func (o *BulkConsignmentNote) SetReference(v int32) {
	o.Reference = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BulkConsignmentNote) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkConsignmentNote) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BulkConsignmentNote) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BulkConsignmentNote) SetDate(v string) {
	o.Date = &v
}

// GetAssingedPieces returns the AssingedPieces field value if set, zero value otherwise.
func (o *BulkConsignmentNote) GetAssingedPieces() string {
	if o == nil || IsNil(o.AssingedPieces) {
		var ret string
		return ret
	}
	return *o.AssingedPieces
}

// GetAssingedPiecesOk returns a tuple with the AssingedPieces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkConsignmentNote) GetAssingedPiecesOk() (*string, bool) {
	if o == nil || IsNil(o.AssingedPieces) {
		return nil, false
	}
	return o.AssingedPieces, true
}

// HasAssingedPieces returns a boolean if a field has been set.
func (o *BulkConsignmentNote) HasAssingedPieces() bool {
	if o != nil && !IsNil(o.AssingedPieces) {
		return true
	}

	return false
}

// SetAssingedPieces gets a reference to the given string and assigns it to the AssingedPieces field.
func (o *BulkConsignmentNote) SetAssingedPieces(v string) {
	o.AssingedPieces = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *BulkConsignmentNote) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkConsignmentNote) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *BulkConsignmentNote) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *BulkConsignmentNote) SetService(v string) {
	o.Service = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BulkConsignmentNote) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkConsignmentNote) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BulkConsignmentNote) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *BulkConsignmentNote) SetValue(v string) {
	o.Value = &v
}

// GetChangeStateUrl returns the ChangeStateUrl field value if set, zero value otherwise.
func (o *BulkConsignmentNote) GetChangeStateUrl() string {
	if o == nil || IsNil(o.ChangeStateUrl) {
		var ret string
		return ret
	}
	return *o.ChangeStateUrl
}

// GetChangeStateUrlOk returns a tuple with the ChangeStateUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkConsignmentNote) GetChangeStateUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeStateUrl) {
		return nil, false
	}
	return o.ChangeStateUrl, true
}

// HasChangeStateUrl returns a boolean if a field has been set.
func (o *BulkConsignmentNote) HasChangeStateUrl() bool {
	if o != nil && !IsNil(o.ChangeStateUrl) {
		return true
	}

	return false
}

// SetChangeStateUrl gets a reference to the given string and assigns it to the ChangeStateUrl field.
func (o *BulkConsignmentNote) SetChangeStateUrl(v string) {
	o.ChangeStateUrl = &v
}

func (o BulkConsignmentNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkConsignmentNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.AssingedPieces) {
		toSerialize["assinged_pieces"] = o.AssingedPieces
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ChangeStateUrl) {
		toSerialize["change_state_url"] = o.ChangeStateUrl
	}
	return toSerialize, nil
}

type NullableBulkConsignmentNote struct {
	value *BulkConsignmentNote
	isSet bool
}

func (v NullableBulkConsignmentNote) Get() *BulkConsignmentNote {
	return v.value
}

func (v *NullableBulkConsignmentNote) Set(val *BulkConsignmentNote) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkConsignmentNote) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkConsignmentNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkConsignmentNote(val *BulkConsignmentNote) *NullableBulkConsignmentNote {
	return &NullableBulkConsignmentNote{value: val, isSet: true}
}

func (v NullableBulkConsignmentNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkConsignmentNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


