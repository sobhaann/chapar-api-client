/*
Chapar Customer API

API for interacting with the Chapar shipping service. All requests are sent with a single query parameter `input` which contains a URL-encoded JSON string payload.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the Geo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Geo{}

// Geo struct for Geo
type Geo struct {
	Lat NullableString `json:"lat,omitempty"`
	Lng NullableString `json:"lng,omitempty"`
}

// NewGeo instantiates a new Geo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeo() *Geo {
	this := Geo{}
	return &this
}

// NewGeoWithDefaults instantiates a new Geo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoWithDefaults() *Geo {
	this := Geo{}
	return &this
}

// GetLat returns the Lat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Geo) GetLat() string {
	if o == nil || IsNil(o.Lat.Get()) {
		var ret string
		return ret
	}
	return *o.Lat.Get()
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Geo) GetLatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lat.Get(), o.Lat.IsSet()
}

// HasLat returns a boolean if a field has been set.
func (o *Geo) HasLat() bool {
	if o != nil && o.Lat.IsSet() {
		return true
	}

	return false
}

// SetLat gets a reference to the given NullableString and assigns it to the Lat field.
func (o *Geo) SetLat(v string) {
	o.Lat.Set(&v)
}
// SetLatNil sets the value for Lat to be an explicit nil
func (o *Geo) SetLatNil() {
	o.Lat.Set(nil)
}

// UnsetLat ensures that no value is present for Lat, not even an explicit nil
func (o *Geo) UnsetLat() {
	o.Lat.Unset()
}

// GetLng returns the Lng field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Geo) GetLng() string {
	if o == nil || IsNil(o.Lng.Get()) {
		var ret string
		return ret
	}
	return *o.Lng.Get()
}

// GetLngOk returns a tuple with the Lng field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Geo) GetLngOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lng.Get(), o.Lng.IsSet()
}

// HasLng returns a boolean if a field has been set.
func (o *Geo) HasLng() bool {
	if o != nil && o.Lng.IsSet() {
		return true
	}

	return false
}

// SetLng gets a reference to the given NullableString and assigns it to the Lng field.
func (o *Geo) SetLng(v string) {
	o.Lng.Set(&v)
}
// SetLngNil sets the value for Lng to be an explicit nil
func (o *Geo) SetLngNil() {
	o.Lng.Set(nil)
}

// UnsetLng ensures that no value is present for Lng, not even an explicit nil
func (o *Geo) UnsetLng() {
	o.Lng.Unset()
}

func (o Geo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Geo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Lat.IsSet() {
		toSerialize["lat"] = o.Lat.Get()
	}
	if o.Lng.IsSet() {
		toSerialize["lng"] = o.Lng.Get()
	}
	return toSerialize, nil
}

type NullableGeo struct {
	value *Geo
	isSet bool
}

func (v NullableGeo) Get() *Geo {
	return v.value
}

func (v *NullableGeo) Set(val *Geo) {
	v.value = val
	v.isSet = true
}

func (v NullableGeo) IsSet() bool {
	return v.isSet
}

func (v *NullableGeo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeo(val *Geo) *NullableGeo {
	return &NullableGeo{value: val, isSet: true}
}

func (v NullableGeo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


