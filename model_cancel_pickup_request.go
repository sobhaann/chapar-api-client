/*
Chapar Customer API

API for interacting with the Chapar shipping service.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chapar

import (
	"encoding/json"
)

// checks if the CancelPickupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelPickupRequest{}

// CancelPickupRequest struct for CancelPickupRequest
type CancelPickupRequest struct {
	User *User `json:"user,omitempty"`
	ConsignmentNo *string `json:"consignment_no,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewCancelPickupRequest instantiates a new CancelPickupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelPickupRequest() *CancelPickupRequest {
	this := CancelPickupRequest{}
	return &this
}

// NewCancelPickupRequestWithDefaults instantiates a new CancelPickupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelPickupRequestWithDefaults() *CancelPickupRequest {
	this := CancelPickupRequest{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CancelPickupRequest) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelPickupRequest) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CancelPickupRequest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *CancelPickupRequest) SetUser(v User) {
	o.User = &v
}

// GetConsignmentNo returns the ConsignmentNo field value if set, zero value otherwise.
func (o *CancelPickupRequest) GetConsignmentNo() string {
	if o == nil || IsNil(o.ConsignmentNo) {
		var ret string
		return ret
	}
	return *o.ConsignmentNo
}

// GetConsignmentNoOk returns a tuple with the ConsignmentNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelPickupRequest) GetConsignmentNoOk() (*string, bool) {
	if o == nil || IsNil(o.ConsignmentNo) {
		return nil, false
	}
	return o.ConsignmentNo, true
}

// HasConsignmentNo returns a boolean if a field has been set.
func (o *CancelPickupRequest) HasConsignmentNo() bool {
	if o != nil && !IsNil(o.ConsignmentNo) {
		return true
	}

	return false
}

// SetConsignmentNo gets a reference to the given string and assigns it to the ConsignmentNo field.
func (o *CancelPickupRequest) SetConsignmentNo(v string) {
	o.ConsignmentNo = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CancelPickupRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelPickupRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CancelPickupRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CancelPickupRequest) SetReason(v string) {
	o.Reason = &v
}

func (o CancelPickupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelPickupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.ConsignmentNo) {
		toSerialize["consignment_no"] = o.ConsignmentNo
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableCancelPickupRequest struct {
	value *CancelPickupRequest
	isSet bool
}

func (v NullableCancelPickupRequest) Get() *CancelPickupRequest {
	return v.value
}

func (v *NullableCancelPickupRequest) Set(val *CancelPickupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelPickupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelPickupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelPickupRequest(val *CancelPickupRequest) *NullableCancelPickupRequest {
	return &NullableCancelPickupRequest{value: val, isSet: true}
}

func (v NullableCancelPickupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelPickupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


